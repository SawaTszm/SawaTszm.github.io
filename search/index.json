[{"content":"Environment  PC: macbook Air (M1) OS: Big Sur 11.6.1  Problem One day, when I pressed Preferences from the docker desktop for mac icon, the Docker screen did not come up (the icon bounced a couple of times and then dropped).\nWhen I restarted my PC, I got an error window saying Fatal Error Failed to ping backend API and docker itself did not start up.\nThe Reset Docker to factory defaults, Diagnose \u0026amp; Feedback, Exit option is there, but I can\u0026rsquo;t press it (the cursor is going around) and it won\u0026rsquo;t let me reset it.\nApparently there are quite a few people in a similar situation, and it seems to be a known bug.(docker for mac issue)。It is still being discussed here, and it looks like there is no perfect solution yet.\nI would like to leave you with the procedure as I was able to update it and work it with various references.\nHow To Update Kill docker related processes command to turn it off, or check docker in the activity monitor and terminate the one that comes up.\n$killall Docker Uninstall It went from the Applications folder to the Trash. In hindsight, I think there was a smarter way to do it.\nInstall Download \u0026amp; install the latest version from docs.docker.com.\nAllow full access If the above installation works, you can skip this step (docker will suggest you to change the access permissions at startup).\nGo to System Preferences\u0026gt;Security and Privacy\u0026gt;Full Disk Access and grant full access to docker.\n(Postscript)\nI looked at another macbook that I hadn\u0026rsquo;t touched for a while and found that I hadn\u0026rsquo;t given docker such permissions (but it was working fine), so I may be a bit uncertain about this.\nRestart docker It worked well:)\n","date":"2022-01-10T12:45:25+09:00","permalink":"https://SawaTszm.github.io/p/dockerdocker-for-mac-doesnt-work/","title":"【Docker】Docker for mac doesn't work"},{"content":"環境  PC: macbook Air (M1) OS: Big Sur 11.6.1  起きた問題 ある日、docker desktop for macのアイコンからPreferencesを押してもDockerの画面が立ち上がらなくなりました(アイコンが2,3回跳ねて落ちる)。\n同様にDownload updateも立ち上がらないのでおや？と思い、一度PCを再起動したらFatal Error Failed to ping backend APIというエラーウィンドウが出てdocker自体が立ち上がらなくなりました。\nReset Docker to factory defaults, Diagnose \u0026amp; Feedback, Exitの選択肢はありますが押せない（カーソルぐるぐる）状態になっていて、リセットもさせてくれません。\nどうやら似た状況になっている方も結構いるようで、既知のバグ？のようです。(docker for macのissue)。こちらでも未だに議論されていて、完璧な解決策はまだ出ていないように見えます。\n色々参考にさせてもらいつつとりあえず復旧はさせたので、手順を残しておこうと思います。\n復帰方法 docker関連のプロセスをkillする コマンドで消すか、アクティビティモニタでdockerを調べて出てきたものを終了させます。\n# コマンドの場合 $killall Docker アンインストール アプリケーションフォルダからゴミ箱にどん。今思えばもうちょっとスマートなやりようがあった気がします。\n新しいのをインストールする 公式サイトから最新版をダウンロード＆インストール。\nフルアクセスを許可 上記でインストールしたものが上手く立ち上がればここはスキップしてもいいと思います（起動時にアクセス権限の変更をdocker側から提案してくれる筈なので）。\nシステム環境設定\u0026gt;セキュリティとプライバシー\u0026gt;フルディスクアクセスからdockerにフルアクセスを許可します。\n（追記）\nしばらく触っていなかった別のmacbookを見てみたらdockerにそんな権限は渡していなかった（でも上手く動いている）ので、ここに関してはちょっと不確かかも知れません。\ndocker再起動 うまく動きました。\n","date":"2022-01-10T12:45:25+09:00","permalink":"https://SawaTszm.github.io/p/dockerdocker-for-mac%E3%81%8C%E6%9B%B4%E6%96%B0%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84/","title":"【Docker】docker for Macが更新できない"},{"content":"First Contributions - Make your first open source contribution in 5 minutes\n ということで、「OSS貢献してみたいけどよくわからないなー」と思って調べていた時に発見したプロジェクトでタイトルの通りOSSコントリビュータデビューさせてもらった時の備忘録です。\n手順 基本的にはリポジトリのREADMEに沿って進めるだけです。本当に5分かかりませんでした。\nfirst-contributions/README.ja.md at master · firstcontributions/first-contributions · GitHub\n様々な言語で翻訳されていて、コミュニティの大きさを感じます。\n 1. リポジトリをフォーク 2. フォークしたリポジトリをクローン 3. ブランチを作成 4. コードを変更してコミット 5. Push 6. PRを送る(githubで自分のリポジトリに行くとCompare \u0026amp; pull requestボタンが表示される) これで完了です！botの手ですぐにmergeされました。\n今後の貢献について 大体のリポジトリでは、READMEやContribute.mdなどに貢献の方法(ルール)が明記されています。まずはそれを見て、issueを立てたりPRを出して提案したりすることになりそうです。\n（OSSコントリビューションというと花形のPRに目が行きがちですが、issueでのエラー報告も立派な貢献になるみたいです。言われてみれば確かに、実装中エラーに当たった時OSSのissueにはお世話になってます……）\n余談  カタカナ表記の場合、リポジトリ派閥とレポジトリ派閥があることに気がつきました。IT用語辞典などでも併記されているので、完全に好みの問題みたいです。 軽い気持ちでやったお試しOSSコントリビューションでしたが、これひとつでfindyの偏差値が10近く上がりました（！）。OSSへの貢献は一つのハードルなのかも知れないですね。 ","date":"2022-01-05T20:34:34+09:00","permalink":"https://SawaTszm.github.io/p/%E5%88%9D%E3%82%81%E3%81%A6%E3%81%AEoss-contributefirst-contributions%E7%B7%A8/","title":"初めてのOSS Contribute【First Contributions編】"},{"content":"最近やったこと DIY(初級) 人生初DIYで元々使ってた机をL字に改造した。\n加工済みのいい感じのサイズの板買ってきてネジで止めただけの簡易机ながら結構快適。仕事も趣味も机に向かってやる系でオンオフの切り替え(というか机片付けてPCしまってiPad出して……の一連の作業)が面倒くさくて困ってたから、趣味の環境をL字の部分にそのまま広げて置くことで凄く楽になった。\n板ギコギコが楽しかったのでまた何か作りたい欲はある。\nブログ(ここ)の改装 見た目を若干弄った。\nHTML, CSSに苦手意識を持っててあんまり積極的に触ってこなかったけど(仕事で必要な時にリファレンス見ればいいやの精神)、色々教えてもらってソース見たり弄ったりするのが楽しくなってきた。\nそのうちHUGOのテーマ作りたい。\n気になったもの crowdin crowdin - Agile localization for tech companies\n最近買ったDjango本で紹介されてたDjango Girlsのチュートリアル内で、翻訳を進めていくために使われてた。\nDjango Girlsのチュートリアル Django Girls(上とダブるけど)\nさっと見たけどめちゃくちゃわかりやすかった。特にインターネットの仕組みあたり。\n人に教える機会があったらここおすすめしたい。\nその他 新すばせかが楽しい。指は死んでる。\n","date":"2021-08-05T21:26:58+09:00","permalink":"https://SawaTszm.github.io/p/2021-08-05-diary/","title":"2021 08 05 Diary"},{"content":"すごく今更\u0026amp;簡潔にだけど、python3.6以降で利用できる文字列フォーマットについて（ずっとstr.format()を使っていたので戒めも兼ねて）。\nフォーマット済み文字列リテラルとは 従来の書き方よりも簡潔、かつわかりやすく記述することができる書き方。\n公式ドキュメント\n使い方 例えば変数に入った数字を3文字のカンマ区切りにする場合：\nhoge = 99999999 # str.format() print(\u0026#34;{:,}\u0026#34;.format(hoge)) # フォーマット済み文字列リテラル print(f\u0026#34;{hoge:,d}\u0026#34;) ","date":"2021-08-02T18:52:08+09:00","permalink":"https://SawaTszm.github.io/p/python%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88%E6%B8%88%E3%81%BF%E6%96%87%E5%AD%97%E5%88%97%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB/","title":"【Python】フォーマット済み文字列リテラル"},{"content":"lodashとは？  The Lodash library exported as a UMD module.\n(中略) \u0026hellip;Lodash makes JavaScript easier by taking the hassle out of working with arrays, numbers, objects, strings, etc.\n 配列、数値、オブジェクト、文字列など、値を扱う際に便利な関数を多く提供しているJavaspriptのライブラリ。\n_.getや_.eachなどがそれ。\n公式ドキュメントがわかりやすいので、これなんだっけ？とかこういうのなかったっけ？とかはそっちを先に見に行きたい。\nlodash - github\n公式ドキュメント\n 使い方 インポート import _ from \u0026#39;lodash\u0026#39;;  関数 調べたり使用したりしたものを追記していくつもり。\n_.get() _.get(object, path, [defaultValue]) objectのpathの値を取得する。値を解決できなかった場合、defaultValueを返す。\n_.has() _.has(object, path) objectのpathの値が存在するかを調べる。値自体は返さない。\n_.set() _.set(object, path, value) objectのpathにvalueの値をセットする。\npathが定義されていない場合は新しく作られる。\nインデックスのプロパティがない場合は配列が作成され、それ以外のプロパティがない場合はオブジェクトが作成される。(？)\n_.each() -\u0026gt; forEach() _.forEach(collection, [iteratee=_.identity]) collectionの要素を反復し、各要素に対してiterateeを実行。\niterateeは3つの引数(value, index|key, collection)で呼び出される。\n※iteratee関数は明示的にfalseを返すことで反復を終わらせることができる\n_.flatten() _.flatten(array) arrayを一段分フラットにする。非破壊的メソッド。\n(例：[1, [2, [3, [4]], 5]]を[1, 2, [3, [4]], 5]に)\n全部フラットにする_.flattenDeep(array)や任意の深さをフラットにする_.flattenDepth(array, [depth=1])もある。\n_.isNil() _.isNil(value) valueの値がnullか、もしくは未定義かをチェックする。\nsortBy() _.sortBy(collection, [iteratees=[_.identity]]) // 例：_.sortBy(users, [\u0026#34;id\u0026#34;, \u0026#34;name\u0026#34;]) id-\u0026gt;nameの順でソート 要素の配列を作成する。非破壊的メソッド。\n","date":"2021-07-17T11:11:15+09:00","permalink":"https://SawaTszm.github.io/p/lodash%E3%81%AE%E6%A6%82%E8%A6%81%E3%81%A8%E9%96%A2%E6%95%B0%E3%81%BE%E3%81%A8%E3%82%81/","title":"Lodashの概要と関数まとめ"},{"content":"目的 バッチ処理も AWS Lambda で書きたいので、SAM テンプレートに記述できるのかどうかを調べる。\n結論 できる。\nし、わかりやすい。\nCloudWatch イベント アプリケーションの AWS SAM テンプレート\n記述例 AWSTemplateFormatVersion:\u0026#34;2010-09-09\u0026#34;Transform:AWS::Serverless-2016-10-31Globals:Function:Timeout:30MemorySize:256Handler:app.lambda_handlerRuntime:python3.7Resources:### Batch ###HogeBatchFunction:Type:AWS::Serverless::FunctionProperties:CodeUri:api/batch/hoge_batchEvents:HogeBatch:# TypeをScheduleにType:ScheduleProperties:# 実行タイミングを決めるSchedule:cron(0 0 ? * SUN *)最後のSchedule式は、rateとcronのどちらでも使える。\nRate または Cron を使用したスケジュール式\n次調べること そもそものtemplate.ymlを先輩に書いて貰っていて、\nあまり内容と記述方法を把握仕切れていないので確認する。\nざっと見て参考にさせてもらいたいなと思った記事(と公式ドキュメント):\nWhat Is the AWS Serverless Application Model (AWS SAM)?\nチュートリアル: CodeDeploy および AWS サーバーレスアプリケーションモデル を使用して更新された Lambda 関数をデプロイする\nAWS SAM を使う前に CloudFormation テンプレートを書こう - Qiita\n","date":"2021-02-19T12:01:46+09:00","permalink":"https://SawaTszm.github.io/p/aws-sam%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%81%A7cloudwatch%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%82%92%E8%A8%98%E8%BF%B0%E3%81%99%E3%82%8B/","title":"【AWS SAM】テンプレートでCloudWatchイベントを記述する"},{"content":"目的 社内お勉強会で DDD 本を輪読することになったんですが、\n改めて「〇〇ってわかりますか？」と言われると戸惑ってしまうことが多いので自分用にまとめました。\n 抽象クラス(abstract class) 他のクラスで継承してもらうことを前提としたクラス。\n複数のクラスの共通処理の中に、一部異なる処理を使用したい場合などに定義する。\n 抽象クラス自体はインスタンス化できない abstract functionで抽象メソッドを定義できる  インターフェース クラスが実装するメソッドを定義することができるもの。\n メソッドの実体は持てない(定義のみ) 使用できる修飾子はpublicのみ 定数を持てる。実装先のクラスでのオーバーライドはできない\n不特定のクラスで、共通のメソッドを定義したい場合などに定義する。  ポリモーフィズム 「中に入るものによって、同じ関数でも違う処理を行える」というオブジェクト指向プログラミングの特徴のこと。\n「モノが「そのモノ」らしく振る舞うこと」 =「呼び出した関数が、呼び出し元のオブジェクトに適した振る舞いをすること」\n# 動物は必ず「鳴く」 interface Animal { sound(); } # 犬は「動物らしい振る舞い」をする(鳴く) class dog implements Animal { sound() { /**/ } } # 動物は「鳴く」ので、引数の動物ごとの異なる鳴き声を処理する # 引数で与えられる動物によって、異なる処理(鳴き声)ができる public function animalsound(animal) { animal.sound() } 継承 親クラスの振る舞いを引き継いで、子クラスを実装すること。 子クラス側で親クラスを拡張することができる。\n委譲 実際の振る舞いを別のオブジェクトに委ねることで、別のオブジェクトの振る舞いを再利用する手法。(？)\nカプセル化 関連のあるデータとその使い方を一まとめにしたもの。 内部のデータを直接いじることはさせずに、使い方だけを見せる。\nGoF デザインパターン 23 種類あるヤツ(雑)\n勉強します\n3 分でわかるデザインパターン入門\nSOLID 原則 SOLID 原則とは Robert C. Martin によって提唱された 5 つのガイドライン。\nこれらのガイドライン(原則)に則ることで、開発者にとって読みやすく、メンテナンスが可能なプログラムを作成しやすくなる。\nRobert C. Martin：\n「ボブおじさん」の通称で知られる(？)ソフトフェア技術者・インストラクター。\nアジャイル宣言の著者の一人。\n「プログラマが知るべき 97 のこと」でもいくつかエッセイを書いている。\n5 つの原則  S：SRP、単一責任の原則\n→ クラスその他諸々が負う責任は一つにしようね O：OCP、解放閉鎖の原則\n→ 修正時に既存のロジックを弄らないといけない実装は駄目だよ L：LSP、リスコフの置換原則\n→ サブクラスとスーパークラスを入れ替えても動くように設計してね I：ISP、インタフェース分離の原則\n→ 使用しないメソッドをクラスに強要するインターフェースを作らないでね D：DIP、依存性逆転の原則  単一責任の原則(SRP) クラスは１つのことだけ責任を負うべき。\nもし複数の責任を負っている場合、それらは連動してしまう。\n※この原則はクラスだけでなく、ソフトフェアコンポーネントやマイクロサービスにも当てはまる。\n 違反する例  # プロパティ管理とDB管理の二つの責任を持ってしまっているクラス class Animal { constructor(name: string) { } getAnimalName() { } saveAnimal(a: Animal) { }  SRP に一致する改善案  class Animal { constructor(name: string) { } getAnimalName() { } } class AnimalDB { getAnimal(a: Animal) { } saveAnimal(a: Animal) { } } 解放閉鎖の原則(OCP) ソフトウェアのエンティティ(クラス、モジュール、関数)は、拡張に対して開き、修正に対して閉じていなければならない。(？)\n→ ロジックのパターンが増える度に既存の処理を修正 or 追記しなくちゃいけないような書き方は避ける。\n 違反する例  class Animal { constructor(name: string) { } getAnimalName() { } } # animalリストを順に処理し、泣き声を出す const animals: Array\u0026lt;Animal\u0026gt; = [ new Animal(“lion”), new Animal(“mouse”) ]; # animalsが更新されるごとに修正を入れないといけない # animalsの修正に対して「閉じていない」関数 function AnimalSound(a: Array\u0026lt;Animal\u0026gt;) { for(int i = 0; i \u0026lt;= a.length; i++) { if(a[i].name == “lion”) log(“gaogao”) if(a[i].name == “mouse”) log(“chu”) } } AnimalSound(animals);  OCP に一致する例  # Animalに仮想メソッドmakeSound()を宣言 # 各々の動物に各々のmakeSound()が実装されるので、 # 新しい動物が増える度にAnimalSound()を変更する必要はない class Animal { makeSound(); # ... } class Lion extends Animal { nameSound() { return “gaogao” } } class mouse extends Animal { nameSound() { return “chu” } } # お好きなアニマルをanimalsに突っ込む fanction AnimalSound(a: Array\u0026lt;Animal\u0026gt;) { for(int i = 0; i \u0026lt;= a.length; i++) { log(a[i].makeSound()); } } AnimalSound(animals); リスコフの置換原則(LSP) サブクラスは、そのスーパークラスで代用可能でなければならない。\n 違反している例  # 全部のAnimalの型を見て、それに関連するLegCountを呼び出す必要がある # コードでクラスの型をチェックしていたら、LSPに違反している場合が多い # OCPにも違反している function AnimalLegCount(a: Array\u0026lt;animal\u0026gt;) { for(int i = 0; i \u0026lt;= a.length; i++) { if(typeof a[i] == Lion) log(LionLegCount(a[i])); if(typeof a[i] == Mouse) log(MouseLegCount(a[i])); if(typeof a[i] == Snake) log(SnakeLegCount(a[i])); } } AnimalLegCount(animals);  LSP に一致した例  # OCPに一致させるために仮想メソッドを定義 class Animal { LegCount(); # ... } # Animal型が通過しても気にせず、ただLegCountメソッドを呼び出すだけ function AnimalLegCount(a: Array\u0026lt;Animal\u0026gt;){ for(let i = 0; i \u0026lt;= a.length; i++) { a[i].LegCount() } } AnimalLegCount(animals); (この例だと OCP の解決法とほぼ一緒なのでは……)\nインターフェース分離の原則(ISP) 顧客に特化した細粒度のインターフェースを作る。\n顧客は、自分たちが使わないインターフェースに依存することを強いられるべきではない。\n 違反する例  interface ISape { drawCircle(); drawSquare(); drawRectagle(); } # 円しか書かないのにdrawSquare()、drawRectagle()を実装しないといけない class Circle implements IShape { drawCircle(){ /**/ } drawSquare(){ /**/ } drawRectangle(){ /**/ } }  ISP に一致する例  interface IShape { draw(); } interface Icicle() { drawCicle(); } interface ISquare { drawSquare(); } class Circle implements ICircle { drawCicle() { /**/ } } # もしくは、IShapeを継承してお好きなdrawを組み立てる 依存性逆転の原則(DIP) 依存性は、具体化ではなく抽象化でなければならない。\n具体的な依存性の問題点：\n  依存元を修正するとき、依存先も修正する必要がある\n  単体テストの範囲が大きくなりがち(場合によっては書けない)\n  テストの範囲が大きくなる。失敗時の原因特定が難しくなる。\n  違反している例(具体的な依存性)\n  Class Speaker() { sound() { /**/} } # この書き方をすることで、RadioTunerはSpeakerに強く依存している # (Speakerの事を直接「知ってしまっている」) # Speakerを修正する場合、RadioTunerも修正が必要になる class RadioTuner() { $speaker = new Speaker(); $speaker-\u0026gt;sound(); }  DIP に一致する例  interface AudioOutput() { sound(); } # Speakerはinterfaceに依存 Class Speaker implements AudioOutput { sound() { /**/} } # RadioTunerもinterfaceに依存 # RadioTuner自体は、自分が実際に渡されているクラスを知らない # (ポリモーフィズムという) class RadioTuner { public function output(AudoiOutput $outputCircuit) { # sound()があることはinterfaceで保証されている  $outputCircuit-\u0026gt;sound(); } } サービスコンテナ サービスコンテナ 5.8 Laravel\n Laravel のサービスコンテナは、クラス間の依存を管理する強力な管理ツールです。依存注入というおかしな言葉は主に「コンストラクターか、ある場合にはセッターメソッドを利用し、あるクラスをそれらに依存しているクラスへ外部から注入する」という意味で使われます。\n クラスのインスタンスを作ってくれるツール。 同じ文字列から、条件によって異なるクラスのインスタンスを生成することができる。\n使用することで、DI と呼ばれるデザインパターンを実現できてクラスの依存性が薄まるので、 単体テストがしやすくなるなどの恩恵が得られる。\nファザード  ファサード（facade、「入り口」）はアプリケーションの サービスコンテナ に登録したクラスへ、「静的」なインターフェイスを提供します。Laravel のほとんどの機能に対して、ファサードが用意されています。Laravel の「ファサード」は、サービスコンテナ下で動作しているクラスに対し、\u0026ldquo;static proxy\u0026quot;として動作しています。これにより伝統的な静的メソッドよりもテストの行いやすさと柔軟性を保ちながらも、簡潔で記述的であるという利点があります。\n Laravel くんが用意してくれている便利なメソッド集(曲解)。\nDB ファザードであれば、DB の操作に便利なメソッドがたくさんある(DB::hogehoge)\n 参考 開発者が知っておくべき SOLID の原則 | POSTD\nGetting a SOLID start. - Clean Coder\n","date":"2021-02-19T12:01:46+09:00","permalink":"https://SawaTszm.github.io/p/ddd%E5%89%8D%E6%8F%90%E7%9F%A5%E8%AD%98%E3%81%BE%E3%81%A8%E3%82%81/","title":"【DDD】前提知識まとめ"},{"content":"Problem When I tried to install the aws s3 adapter in my laravel project, I went into the docker container and ran composer require league/flysystem-aws-s3-v3 ~1.0 and it was killed as follows.\nroot@9f833b0a116f:/var/www/html/laravel# composer require league/flysystem-aws-s3-v3 ~1.0 ./composer.json has been updated Loading composer repositories with package information Updating dependencies (including require-dev) Killed Pls don\u0026rsquo;t kill it\u0026hellip; I want to complete the installation of this without getting killed.\nTL;DR Increase the memory allocation of Docker for Mac as much as possible.\nSolution What I found First, I checked when Killed is triggered.\nThis seems to be a behavior called OOM Killer.\n 　OOM Killer (Out of Memory Killer) is a mechanism in the Linux kernel that kills processes to free up memory when the system has used up all of its real and virtual memory space (swap space) and cannot allocate the necessary memory space. Killer is provided to avoid the worst-case scenario where the system itself stops due to inability to allocate free memory.\n(translated)\n 日経XTECH\nIt seems that the forced kill of the process is the result of OOM Killer\u0026rsquo;s work to prevent the system itself from stopping.\nIn other words, the cause this time was lack of memory.\nIn Docker for mac, I looked at Preferences \u0026gt; Resources \u0026gt; Memory and found that I currently have 3.75GB allocated, and Swap is 1GB.\nIn addition, I checked the memory used by docker in the Mac\u0026rsquo;s Activity Monitor, and found that it was using up almost all of the allocated memory.\nWhat I tried I went to Preferences \u0026gt; Resources \u0026gt; Memory in Docker for mac and increased the allocated memory as much as I could.\nThe mac itself is 16GB, so I decided to take a look at it and increase it to 5GB.\nOnce again, I ran composer require league/flysystem-aws-s3-v3 ~1.0.\nroot@9f833b0a116f:/var/www/html/laravel# composer require league/flysystem-aws-s3-v3 Using version ^1.0 for league/flysystem-aws-s3-v3 ~~~ Package manifest generated successfully. 38 packages you are using are looking for funding. Use the `composer fund` command to find out more! it worked well:)\nWhat I thought In this case, 5GB was enough, but if you\u0026rsquo;re working on several projects, for example, and you\u0026rsquo;re constantly setting up several Docker containers on, you\u0026rsquo;ll probably end up allocating memory and then eating it up.\nI tend to set up containers with restart: always from the time of development, but it might be better to take measures such as dropping containers that are not used for a long time.\n","date":"2021-02-19T12:01:46+09:00","permalink":"https://SawaTszm.github.io/p/dockerincrease-memory-allocation-to-avoid-killed./","title":"【Docker】Increase memory allocation to avoid Killed."},{"content":"目的 laravelプロジェクトにawsのs3アダプタをインストールしようとして、dockerコンテナ内に入ってcomposer require league/flysystem-aws-s3-v3 ~1.0を実行したら下記の通りKillされました。\nroot@9f833b0a116f:/var/www/html/laravel# composer require league/flysystem-aws-s3-v3 ~1.0 ./composer.json has been updated Loading composer repositories with package information Updating dependencies (including require-dev) Killed ｺﾛｻﾅｲﾃﾞ……\nこれを、ちゃんと殺されずにインストール完了させたいので色々調べました。\nTL;DR Docker for Macのメモリ割り当てをできる範囲で増やす。\n解決法 調べたこと まず、Killedがどういう時に発動するのかを調べました。\nら、OOM Killerと呼ばれる動作らしいです。\n 　OOM Killer（Out of Memory Killer）は，システムが実メモリーと仮想メモリー空間（スワップ領域）を使い切り，必要なメモリー領域を新たに確保できない場合に，プロセスを強制終了させて空きメモリーを確保する，Linuxカーネルの仕組みです。OOM Killerは，空きメモリーが確保できないことによりシステム自体が停止するという最悪の事態を避けるために用意されています。\n 日経XTECHさんより引用\n強制的にプロセスがKillされてしまうのは、システム自体が止まってしまわないようにOOM Killerさんが働いた結果らしいです。\nつまり、今回の原因はメモリ不足。\nDocker for macで、Preferences \u0026gt; Resources \u0026gt; Memoryを見てみると、現在は3.75GB割り当てしていることがわかりました。Swapは1GB。\n合わせてMacのアクティビティモニタでdockerが使っているメモリを調べて見ると、割り当て分ほとんど使い切っていました。\n実行したこと Docker for macのPreferences \u0026gt; Resources \u0026gt; Memoryから、割り当てのメモリをできる範囲で増やしました。\nmac自体は16GBなので、まぁ一回様子見て5GBまであげてみることに。\n改めてcomposer require league/flysystem-aws-s3-v3 ~1.0を実行。\nroot@9f833b0a116f:/var/www/html/laravel# composer require league/flysystem-aws-s3-v3 Using version ^1.0 for league/flysystem-aws-s3-v3 ~略~ Package manifest generated successfully. 38 packages you are using are looking for funding. Use the `composer fund` command to find out more! 無事入りました。\n思ったこと 今回は5GBで足りたけど、例えばいくつかの案件を掛け持ちしていて、常にいくつもDockerコンテナを立ち上げる……という状態だとメモリ割り当て→食いきるのいたちごっこになるのでは？と思いました。\n開発時からコンテナはrestart: alwaysで設定しがちだけど、長く使わないものはちゃんと落としておく、などの対策もした合わせてした方が良いのかもしれないですね。\n","date":"2021-02-19T12:01:46+09:00","permalink":"https://SawaTszm.github.io/p/dockerkilled%E3%81%A8%E8%A8%80%E3%82%8F%E3%82%8C%E3%81%AA%E3%81%84%E3%81%9F%E3%82%81%E3%81%AB%E3%83%A1%E3%83%A2%E3%83%AA%E5%89%B2%E3%82%8A%E5%BD%93%E3%81%A6%E3%82%92%E5%A2%97%E3%82%84%E3%81%99/","title":"【Docker】Killedと言われないためにメモリ割り当てを増やす"},{"content":"目的 docker-composeで立てたnginxをhttps対応にする。\nあくまでも開発環境用なのでオレオレ証明書です。\n手順 自己署名証明書をサクッと作成する ❯ openssl req -x509 -nodes -new -keyout server.key -out server.crt -days 365 docker-composeの更新 443ポートを使用するように変更。\nまた、作成した証明書も読み込めるようにvolumesも更新。\nversion: \u0026#34;3.5\u0026#34;services: web: build: ./docker/nginx restart: always ports: - 443:443 # 変更 depends_on: - app volumes: - ./:/var/www/html - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf - ./docker/nginx/server.crt:/etc/nginx/server.crt # 追加 - ./docker/nginx/server.key:/etc/nginx/server.key # 追加 links: - app networks: - defaultdefault.confの更新 ポートを443に変更し、証明書の情報を追加します。\nserver { listen 443; ssl on; ssl_certificate /etc/nginx/server.crt; ssl_certificate_key /etc/nginx/server.key; index index.php index.html; server_name php-docker.local; error_log /var/log/nginx/error.log; access_log /var/log/nginx/access.log; root /var/www/html/laravel/public; location / { try_files $uri $uri/ @laravel; } 立ち上げ ❯ docker-compose down \u0026amp;\u0026amp; docker-compose up -d ❯ docker-compose ps Name Command State Ports -------------------------------------------------------------------------------------------------------------------- web_1 nginx -g daemon off; Up 0.0.0.0:443-\u0026gt;443/tcp オレオレ証明書なので接続時に警告が出ますが、ひとまずこれでhttpsでの接続が可能になりました。\n【補足】laravel-admin対応 環境変数の更新 .envのAPP_URLを更新する。\nAPP_URL=https://~~~\nちなみに実際の作業時、ここをちゃんとhttpsにはしてたんですが、お試しデプロイ時にlocalhostにしたままにしてしまって遷移先が全部つながらずフフ……となるなどしました。\n設定ファイルの更新 larave-adminの遷移先URLもhttpsにするため、confit/admin.phpも修正。\n\u0026#39;https\u0026#39; =\u0026gt; env(\u0026#39;ADMIN_HTTPS\u0026#39;, TRUE), 参考にさせていただいたもの オレだよオレオレ認証局で証明書つくる - Qiita\nNginx on DockerでHTTPS接続できるローカルサーバーを用意する - Tomcky’s blog\nこれも大事\nオレオレ証明書を使いたがる人を例を用いて説得する - Qiita\n","date":"2021-02-19T12:01:46+09:00","permalink":"https://SawaTszm.github.io/p/dockernginxdocker-compose%E4%B8%8A%E3%81%AEnginx%E3%82%92https%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8B%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E7%B7%A8/","title":"【Docker】【nginx】docker-compose上のnginxをhttps対応する(開発環境編)"},{"content":"割と大量のデータを別の場所に転送したい。といった要件があり、諸々模索している最中で、先輩から教えてもらったEmbulkを触ってみたのでまとめました。\nEmbulkとは GitHub - embulk/embulk: Embulk: Pluggable Bulk Data Loader.\nさまざまなストレージ、データベース、NoSQL、クラウドサービス間のデータ転送を支援する並列バルクデータローダーです。\n関数を追加するプラグインをサポートしており、インプット先/アウトプット先に沿ったプラグインを適宜使用する/作成することで、前述の様々なストレージやDBなどでデータ転送を行うことができます。\nインストール Brewでインストール可能です。\n$ brew install embulk # embulk: Java 1.8 is required to install this formula. と言われたらエラー文通り下記でJava入れてもう一回 $ brew cask install homebrew/cask-versions/adoptopenjdk8 必要だなと思ったプラグインをプラグイン一覧から確認してインストール。\n# CSVインポート $ embulk gem install embulk-input-jdbc # mysqlインポート $ embulk gem install embulk-input-mysql # mysqlアウトプット $ embulk gem install embulk-output-mysql # などなど チュートリアル 公式ドキュメントに乗っている、めちゃくちゃ簡単な動作確認チュートリアルです。\nCSVを読み込んで画面に表示するだけの簡単なものになっています。\n# サンプルCSVファイル、構成ファイルを作成 $ embulk example ./try1 # 推測プラグインを呼び出して適切な構成ファイル(提案)を出力。 $ embulk guess ./try1/seed.yml -o config.yml # インプット側から引っ張ってこれるデータを確認 $ embulk preview config.yml # 実行！(csvから読み込んで画面に表示するだけ) $ embulk run config.yml Embulkではバルクデータロードを定義するために、yamlファイルを使います。\nサンプルはこんな感じ：\nin:# インプットプラグインオプションtype:filepath_prefix:./mydata/csv/decoders:- {type:gzip}parser:charset:UTF-8newline:CRLFtype:csvdelimiter:\u0026#39;,\u0026#39;quote:\u0026#39;\u0026#34;\u0026#39;escape:\u0026#39;\u0026#34;\u0026#39;null_string:\u0026#39;NULL\u0026#39;skip_header_lines:1columns:- {name: id, type:long}- {name: account, type:long}- {name: time, type: timestamp, format:\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;}- {name: purchase, type: timestamp, format:\u0026#39;%Y%m%d\u0026#39;}- {name: comment, type:string}filters:- type:speedometerspeed_limit:250000out:# アウトプットプラグインオプションtype:stdoutLiquidテンプレートエンジン を使用してこの構成ファイルに環境変数を埋め込むこともできるけど、実験的な機能なので変更される可能性があるとのこと。\nまた、同じように別の構成ファイルを含めることもできるらしいです。\nこれらのためにテンプレートエンジンを使用するには、設定ファイルの末尾をyml.liquidにする必要があります。\n(今回はこの二つは割愛)\nembulk-input-dynamodbをローカルから試してみる プラグインを作ってくださっている方がいらっしゃったので使わせていただきました！\nGitHub - lulichn/embulk-input-dynamodb\n構成ファイル なぜかauth_method : envとauth_method : profileは上手く行かなかったので(後述)、ローカルでの動作確認時は直書きのauth_method : basicでやってます。\nIAMロールが設定されているものの上で動かすのであれば、credentials情報などは不要らしいです。\nin:type:dynamodbauth_method:basic # IAMロールが設定されていればこの辺りは不要access_key_id:***# 同上secret_access_key:***# 同上table:dynamodb-table-nameregion:ap-northeast-1scan:total_segment:20# 要確認scan_limit:10000record_limit:10columns:- {name: user_id, type:long}- {name: name, type:string}out:type:stdout # 画面に出力するembulk previewでインプット内容を確認します。\n（今回は画面上にアウトプットするだけなので、embulk runでも大丈夫だと思います）\n$ embulk preview config.yml # 上記でplugin is not found 的なエラーが出た時は下記を実行(\u0026lt;\u0026gt;内は適宜書き換えて下さい) $ embulk preview -I /Users/\u0026lt;user\u0026gt;/.embulk/lib/gems/gems/embulk-input-dynamodb-\u0026lt;varsion\u0026gt;/lib config.yml 無事指定したテーブルの項目が表示されたら成功です！\nハマったところ 実行時にInputPlugin 'dynamodb' is not foundになる 最初は以下の方法でpreviewしようとしていましたが、エラーが出てしまいました。\n$embulk preview config.yml エラー：\nError: InputPlugin \u0026#39;dynamodb\u0026#39; is not found. org.jruby.proxy.org.embulk.config.ConfigException$Proxy1: Unknown input plugin \u0026#39;dynamodb\u0026#39;. embulk/input/dynamodb.rb is not installed. Run \u0026#39;embulk gem search -rd embulk-input\u0026#39; command to find plugins. インストールはしているはずだけど、もしかして見にいっている場所が違う？と思ったら割とビンゴでした。\nこの実行時のログではGem's home and path are set by default: \u0026quot;/var/root/.embulk/lib/gems\u0026quot;と出ていて、プラグインをインストールした先（私の場合は/Users/\u0026lt;user\u0026gt;/.embulk/lib/gems/）とは異なる場所を参照していたため、そんなものはない！と認識されてしまっていたようです。\nそのため、最初の一回は使用しているプラグインのパスを明示的に渡してあげる必要があります。\n$embulk preview -I /Users/\u0026lt;user\u0026gt;/.embulk/lib/gems/gems/embulk-input-dynamodb-\u0026lt;varsion\u0026gt;/lib config.yml 一度実行が通ってくれた後は、Gem's home and path are set by defaultが上記で設定したパスの方を見にいってくれるようになり、$ embulk preview config.ymlでも実行できるようになりました。\nAWS認証情報渡す部分 embulk-input-dynamodbではAWS認証情報を受け取る方法を選ぶことができるのですが、やってみようと思ったenv, profileでエラーが発生し、トラブルシューティングがしきれなかったので一旦上記のbasicで試しました。\n（結構初歩的な部分でつまづいている気もするました……）\n最初profileでAWS認証情報を取得しようとした構成ファイル：\nin:type:dynamodbauth_method:profileprofile_file:~/.aws/credentialsprofile_name:defaulttable:dynamodb-table-nameregion:ap-northeast-1# 以下同じエラー：\nError: java.lang.IllegalArgumentException: ~/.aws/credentials **追記：**こちらご指摘いただいて解決しました！ありがとうございます！\nyamlファイルでは~/.aws/credentialsの~の部分を解決してくれないので（これはシェル側の機能）、明示的に渡してあげる必要があります。\n絶対パスで記述し直すか、環境変数を使用して~の部分を渡してあげる形にすると通るようになります。\n次envで認証情報を取得しようとした構成ファイル：\nin:type:dynamodbauth_method:envtable:dynamodb-table-nameregion:ap-northeast-1# 以下同じエラー：\nError: Unable to load AWS credentials from environment variables (AWS_ACCESS_KEY_ID (or AWS_ACCESS_KEY) and AWS_SECRET_KEY (or AWS_SECRET_ACCESS_KEY)) ($envで確かめてみたけどちゃんと環境変数には定義できていた)\nまとめ めちゃくちゃ触りだけをやりましたが、Embulk素敵ですね。\nあとはこれをAWS上で定期実行するためにどうするかを調べて行こうかなと思います。\n","date":"2021-02-19T12:01:46+09:00","permalink":"https://SawaTszm.github.io/p/embulk%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%ABdynamodb%E3%81%AE%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/","title":"【Embulk】インストール＆dynamoDBのインポートを試してみる"},{"content":"目的 laravel-admin使いたいだけの用途にLaradockは重すぎる……\nので、お勉強も兼ねて、docker-composeでLaravel\u0026amp;MySQLのみの環境を立てる。\nその上でlaravel-adminの管理画面まで開けるようにする。\n構成 project_root_dir ├── docker-compose.yml ├── docker │ ├── nginx │ │ ├── Dockerfile │ │ └── default.conf │ ├── php │ │ └── Dockerfile │ └── db │ │ ├── my.cnf │ └── Dockerfile └── laravel └── ... 手順 docker-compose.ymlを作成 version:\u0026#34;3.5\u0026#34;services:app:build:context:.dockerfile:./docker/php/Dockerfileargs:PROJECT_NAME:app_adminvolumes:- ./:/var/www/htmldepends_on:- databaselinks:- databaseports:- \u0026#34;4000:80\u0026#34;- \u0026#34;4001:8080\u0026#34;tty:truedatabase:image:mysql:5.7restart:alwaysenv_file:.env_dbports:- \u0026#34;23306:3306\u0026#34;volumes:- \u0026#34;./docker/database/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d\u0026#34;- \u0026#34;./docker/database/my.cnf:/etc/mysql/conf.d/my.cnf\u0026#34;web:build:./docker/nginxports:- 80:80depends_on:- appvolumes:- ./:/var/www/html- ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conflinks:- appappコンテナ設定 composerはもうここに含める\nFROMphp:7-fpmCOPY php.ini /usr/local/etc/php/RUN apt-get update \u0026amp;\u0026amp; apt-get install -y \\  libfreetype6-dev libjpeg62-turbo-dev libpng-dev libmcrypt-dev libonig-dev \\  git vim unzip \\  \u0026amp;\u0026amp; docker-php-ext-install pdo_mysql mysqli gd iconv \\  \u0026amp;\u0026amp; apt-get clean# install composerRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composerwebコンテナ設定 FROMnginx:latestRUN apt-get update \u0026amp;\u0026amp; apt-get install -y \\  vim \\  unzip \\  zip \\  git後々laravelディレクトリを作るので、設定ファイルのルートは/var/www/html/laravel/~にしておく。\nserver { listen 80; index index.php index.html; server_name php-docker.local; error_log /var/log/nginx/error.log; access_log /var/log/nginx/access.log; root /var/www/html/laravel/public; // ココ location / { try_files $uri $uri/ @laravel; } # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html { root /var/www/html; } location ~ \\.php$ { try_files $uri $uri/ @laravel; fastcgi_split_path_info ^(.+\\.php)(/.+)$; fastcgi_pass app:9000; fastcgi_index index.php; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_path_info; } location @laravel { fastcgi_split_path_info ^(.+\\.php)(/.+)$; fastcgi_pass app:9000; fastcgi_index index.php; include fastcgi_params; fastcgi_param SCRIPT_FILENAME /var/www/html/laravel/public/index.php; // ココ fastcgi_param PATH_INFO $fastcgi_path_info; } } dbコンテナの設定 [mysql] default-character-set=utf8mb4 [mysqld] sql-mode=\u0026quot;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\u0026quot; character-set-server=utf8mb4 collation-server=utf8mb4_general_ci [mysqld_safe] timezone = UTC default-time-zone = UTC 後はHOST情報などを.enb_db(docker-compose.ymlで指定したファイル)に記述する。\nMYSQL_DATABASE=[my_database_name] MYSQL_USERNAME=root MYSQL_PASSWORD= MYSQL_HOSTNAME=127.0.0.1 MYSQL_ROOT_PASSWORD= API_MYSQL_PORT=23306 起動＆Laravelのインストール # 起動 $ docker-compose up -d # laravelプロジェクトの作成 $ docker-compose exec app /bin/bash app$ composer create-project --prefer-dist laravel/laravel laravel http://localhost/ でwelcomページが見られるようになる。\nLaravel環境変数ファイルの修正 laravel/.envを、DB情報を作成したdockerコンテナに合わせて修正。\nDB_CONNECTION=mysql DB_HOST=db DB_PORT=3306 DB_DATABASE=[my_database_name] DB_USERNAME=root DB_PASSWORD= laravel-adminをインストール composerを使用してインストールし、有効化する。 公式ドキュメントがかなりまとまっていて素敵です。\n$ docker-compose exec app /bin/bash app $ cd laravel app/laravel $ composer require encore/laravel-admin app/laravel $ php artisan vendor:publish --provider=\u0026#34;Encore\\Admin\\AdminServiceProvider\u0026#34; app/laravel $ php artisan admin:install http://localhost/admin/に接続して、ログイン画面が出ればおk！\nadmin/adminで入れます。\n補足：既にある開発環境のDBコンテナに接続する なんらかの理由で、管理画面開発に使用したいDBコンテナが既存のdocker-compose.ymlにある場合。\n(開発側はPythonでもりもり作業してるからLaravelのディレクトリ混ぜたくないとかそう言った場合)\n前提として、以下であれば比較的簡単に繋げられます。\n DBコンテナ側でなんらかのDockerNetworkを設定している 開発環境の方でもdocker-compose up -dを実行している (直接でも良いし、もしくは開発環境のリポジトリをサブモジュール として引っ張ってきて叩くなどする)  例えばtest-appという名前のnetworkを設定している↓のであれば、\nversion:\u0026#34;3.5\u0026#34;services:database:hostname:databaseimage:mysql:5.7~~~networks:- defaultnetworks:default:name:test-app管理画面側のdocker-compose.ymlでそれを使用するように書き換える↓\nversion:\u0026#34;3.5\u0026#34;services:app:build:context:.dockerfile:./docker/php/Dockerfileargs:PROJECT_NAME:recipe_app_adminrestart:alwaysvolumes:- ./:/var/www/htmlports:- \u0026#34;4000:80\u0026#34;- \u0026#34;4001:8080\u0026#34;tty:truenetworks:- default# dbコンテナの設定は不要になるweb:build:./docker/nginxrestart:alwaysports:- 80:80depends_on:- appvolumes:- ./:/var/www/html- ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conflinks:- appnetworks:- defaultnetworks:default:name:test-appexternal:true# 外部ファイルで設定していることを指定後はよしなに環境変数ファイルを更新し、開発環境→管理画面開発環境の順にdocker-compose up -dを叩くだけです。\n","date":"2021-02-19T12:01:46+09:00","permalink":"https://SawaTszm.github.io/p/laravel-mysql-nginxdocker-compose%E3%81%A7%E6%9C%80%E5%B0%8F%E6%A7%8B%E6%88%90%E3%81%AE%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/","title":"【Laravel+MySQL+nginx】docker-composeで最小構成の環境構築"},{"content":"こんにちは。バックエンドエンジニアの佐和です。\n案件でしばらくlaravel-adminという管理画面を作成するためのライブラリを使っていたので、調べたことやつまづいたところも含めて少しずつ書き起こそうと思います。\nまずはインストール編です。簡単に管理画面を確認できるところまで見ていきましょう。\nlaravel-adminとは laravelで簡単にDBの管理画面を作成することができるライブラリです。\nドキュメントやデモサイトなど使用するために必要な資料が充実しており、難しいカスタムを行う必要がなければものすごく簡単に管理画面が構築できます。\nLaravel-admin(ドキュメント)\nGitHubページ\n基本的な使用方法は上記でカバーし、カスタマイズして使用したい際には直接ソースコードを読んで適宜書き換えていく形になります。\n主観ですが、コード内のコメントも(おそらく書き換える前提の部分は)丁寧に書かれているので、しっかり読み解けば問題ないかと思います。\nプロジェクトの作成 既に開発しているlaravelプロジェクトに追加する場合は、この章は飛ばしてもらって大丈夫です。\n何もないところからlaravel-adminを試したい方は、まずlaravelプロジェクトを作成するところから始めましょう。\n公式によると、現在のバージョンでは以下の環境が推奨されるようです。\n PHP 7+ laravel 5.5+   This package requires PHP 7+ and Laravel 5.5, for old versions please refer to 1.4\nlaravel-admin install\n $composer create-project --prefer-dist \u0026#34;laravel/laravel=5.5.*\u0026#34; \u0026lt;project-name\u0026gt; DBも必要になってくるので、.envにDBの情報も書き足しておきましょう。\nよければこちらの記事も参考にしてみてください。\n【Laravel+MySQL+nginx】docker-composeで最小構成の環境構築 - SawaLog\nインストール laravelの準備ができたら早速laravel-adminをインストールします。\n$composer require encore/laravel-admin インストールが終わったら下記コマンドを実行します。\n$php artisan vendor:publish --provider=\u0026#34;Encore\\Admin\\AdminServiceProvider\u0026#34; $php artisan admin:install これらを実行すると、app/Adminディレクトリが作られます。これからの実装はこのディレクトリ配下で行うことになります。\nファイルの初期配置は以下。\napp/Admin ├── Controllers │ ├── ExampleController.php │ └── HomeController.php ├── bootstrap.php └── routes.php フロント周りのファイルは/public/packages/adminに置かれています。\n構成ファイルはconfig/admin.phpです。後々触ることになります。\nここまでで既にダッシュボードは作成されているので、php artisan serveなどをして、http://localhost:8000/admin にアクセスしてみましょう。\nID・PASSどちらにもadminと入力し、無事ダッシュボードが表示されれば成功です。\n早速DBテーブルの管理画面を作成していきましょう。\nモデル・コントローラ作成 laravelでDBテーブルを認識するためにモデルを作成します。\n$php artisan make:model Recipe モデルが作成されたのを確認したら、それを利用してAdmin用のコントローラを作成します。\n$php artisan admin:make RecipeController --model=App\\\\Recipe 成功すると、作成したコントローラのルーティング情報がターミナルに出力されます。\nこれをapp/Admin/routes.phpに記述しましょう。\n$router-\u0026gt;resource(\u0026#39;admin/recipes\u0026#39;, RecipeController::class); 上記ルーティング情報のURLを叩くと、それらしい画面が表示されていると思います。\nあとは作成したAdmin用のコントローラを、ドキュメントを参考にしながら更新していく流れになります。\n現在仕様として提供されているのは以下のページです。\n 一覧画面(grid関数) 詳細画面(show関数) 新規作成・編集画面(form関数)  それぞれドキュメントに基本の使用方法からカスタマイズ方法まで乗っていますので、一通り目を通すことをお勧めします。\nまとめ とても簡単に導入できるので、気になっている方は一度試して見ると面白いかも知れません。\nその他、主にカスタマイズ部分でつまづくことが多かったので、少しずつ記事にして行こうかと思います。\n参考 Laravel-admin(ドキュメント)\nlaravel-admin(GitHub)\n","date":"2021-02-19T12:01:46+09:00","permalink":"https://SawaTszm.github.io/p/laravel-admin%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E7%94%BB%E9%9D%A2%E4%BD%9C%E6%88%90%E3%81%BE%E3%81%A7-%E7%B7%A8/","title":"【laravel-admin】インストール＆画面作成まで 編"},{"content":"\u0026gt;\u0026gt;\u0026gt; config(\u0026#39;database.connections.pgsql\u0026#39;) =\u0026gt; [ \u0026#34;read\u0026#34; =\u0026gt; [ \u0026#34;host\u0026#34; =\u0026gt; [ \u0026#34;postgres2\u0026#34;, ], ], \u0026#34;write\u0026#34; =\u0026gt; [ \u0026#34;host\u0026#34; =\u0026gt; \u0026#34;postgres\u0026#34;, ], ... 反映されてるな、と思ってconnectionを見る。\n\u0026gt;\u0026gt;\u0026gt; DB::connection(\u0026#39;pgsql::read\u0026#39;)-\u0026gt;getConfig(); =\u0026gt; [ ..., \u0026#34;host\u0026#34; =\u0026gt; \u0026#34;postgres\u0026#34;, ] ……あれ？ Readコネクションなのでpostgres2であって欲しいのに、postgresが出てきてしまった。 （ここでコードを読んでいけばすぐに解決できたはずだったが、結構遠回りをしてしまった）\ngetConfigで参照されるconfigはIlluminate\\Database\\Connectors\\ConnectionFactory::make内で\n/** * Establish a PDO connection based on the configuration. * * @param array $config * @param string|null $name * @return \\Illuminate\\Database\\Connection */ public function make(array $config, $name = null) { $config = $this-\u0026gt;parseConfig($config, $name); if (isset($config[\u0026#39;read\u0026#39;])) { return $this-\u0026gt;createReadWriteConnection($config); } return $this-\u0026gt;createSingleConnection($config); } make内でcreateReadWriteConnectionを呼び出され、\n/** * Create a read / write database connection instance. * * @param array $config * @return \\Illuminate\\Database\\Connection */ protected function createReadWriteConnection(array $config) { $connection = $this-\u0026gt;createSingleConnection($this-\u0026gt;getWriteConfig($config)); return $connection-\u0026gt;setReadPdo($this-\u0026gt;createReadPdo($config)); } その中でwrite用のconfigがセットされてるのでどう呼び出してもwriterのconfigが見える。 Readとwriteのでconnectionインスタンスが切り替わってるわけではなさそう。\nなので、「Readコネクションの向き先が正しく設定できているかどうか」はこの方法ではわからない。ということがわかりました。\n","date":"2021-02-19T12:01:46+09:00","permalink":"https://SawaTszm.github.io/p/laravellaravel%E3%81%A7%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8Bdb%E3%82%92%E3%82%92readwrite%E6%A7%8B%E6%88%90%E3%81%AB%E3%81%99%E3%82%8B%E6%99%82%E3%81%AB%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E3%83%8F%E3%83%9E%E3%81%A3%E3%81%9F%E8%A9%B1/","title":"【Laravel】Laravelで使用するDBををReadWrite構成にする時にちょっとハマった話"},{"content":"やりたいこと Laravel くんで Controller をすっきりさせたいので、バリデーションをフォームリクエストで行いたい。\nプラスで、簡単な条件分岐のバリデーションも付け足したい。\n結論 withValodatorメソッドを通してsometimesを使うのが良さげ。\n詳しく 通常のフォームリクエストでのバリデーション // FormRequest  namespace App\\Http\\Request; use \\\\illuminate\\Foundation\\Http\\FormRequest; class ItemUpdateRequest extends FormRequest { /** * Determine if the user is authorized to make this request. * * @return bool */ public function authorize() { return true; } public function rules() { return [ \u0026#39;id\u0026#39; =\u0026gt; \u0026#39;required|integer\u0026#39;, \u0026#39;item_type\u0026#39; =\u0026gt; \u0026#39;required|string|in:tv,web,radio\u0026#39; \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;required|string|max:255\u0026#39;, \u0026#39;url\u0026#39; =\u0026gt; \u0026#39;nullable|url|max:2083, \u0026#39;note\u0026#39; =\u0026gt; \u0026#39;nullable|string|max:2047\u0026#39;, ]; } } // Controller(必要な記述以外は省略)  use App\\Http\\Request\\ItemUpdateRequest; class ItemController extends Controller { public function update(ItemUpdateRequest $request) { //  } } これだけで通常のバリデーションは出来ますね。\nなんて便利なんだ Laravel。\nただ、例えばitem_type == 'web'の時だけurlカラムは必須にしたいとか、そういった簡単な条件付けは rules の中ではできません。\n条件付きのバリデーションの追加 じゃあどうするよ。前述の通り、withValidatorメソッドとsometimesを使います。\nメソッドについては、以下にそれらしいことが書いてあります。\nLaravel Validation\nsometimes は条件ごとに適応するルールを記載できるものなので、それを使用してフォームリクエストに下記メソッドを追加するだけ。\n/** * Configure the validator instance. * * @param \\Illuminate\\Validation\\Validator $validator * @return void */ public function withValidator($validator) { $validator-\u0026gt;sometimes(\u0026#39;url\u0026#39;, \u0026#39;required\u0026#39;, function ($input) { return $input[\u0026#39;item_type\u0026#39;] == \u0026#39;web\u0026#39;; }); } このフォームリクエストを継承して作る子クラスにもこのメソッド内の条件は引き継がれます。\nこの記述だと条件一つに対して一文が長くなってしまうので、条件分岐が多い/複雑な場合には向かないかもですが、ちょっとした分岐が必要な際には活用できると思います。\n","date":"2021-02-19T12:01:46+09:00","permalink":"https://SawaTszm.github.io/p/laravel%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%81%A7%E3%81%AE%E3%83%90%E3%83%AA%E3%83%87%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AB%E6%9D%A1%E4%BB%B6%E4%BB%98%E3%81%8D%E3%81%AE%E5%88%B6%E7%B4%84%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B/","title":"【Laravel】フォームリクエストでのバリデーションに条件付きの制約を追加する"},{"content":"やりたいこと データベース：ペジネーション 5.8 Laravel\nこのページの「独自ペジネータ作成」の欄にあるように、\nIlluminate\\Pagination\\LengthAwarePaginatorインスタンスを作成して、自前の Collection を Collection のままページネーションしたい。\n結論 ペジネーションは引数に Collection を許容しているので実装が可能。\nLengthAwarePaginatorインスタンスの第一引数に渡す Collection を、slice()メソッドを使って Collection の型を崩さずに区切る。\nこれだけ見ると「自明では？」と思うけど、初心者(私)はどハマりしたので過程も含めて書いておきます。\nハマった流れ まず「Eloquent ORM から取ってきた結果をページネーションしたいわね」と思い Laravel くんドキュメント(前述)を参照。\n Note: 自前でペジネーターインスタンスを生成する場合、ペジネーターに渡す結果の配列を自分で”slice”する必要があります。その方法を思いつかなければ、 [array_slice] PHP 関数を調べてください。\n なるほど！！！！！\nと思い array_slice()を使用して記述したのが以下のような書き方。\n// app/Services/ItemsService.php  // 前略。$columnsには取得したいカラム名を格納  $items = ItemMaster::query() -\u0026gt;select($columns) -\u0026gt;with(\u0026#39;relatedUsers\u0026#39;) -\u0026gt;get(); // 表示する件数のみ取得するために、ページ番号($page)と最大表示件数($limit)から$offsetを計算  $offset = ($page * $limit) - $limit; // ドキュメントに言われたように表示する部分のみ切り取った配列を用意  $slice = array_slice($items-\u0026gt;toArray(), $offset, $limit); return new LengthAwarePaginator($slice, count($items), $limit, $page); これでも$columnsの値を参照する分には特に問題ない。\nただ、return を受け取った先の Resource なんかでリレーションの情報が欲しくて$this-\u0026gt;relatedUsers...なんていうふうに書くとその時点でエラーになってしまう。\n原因は$slice = array_slice($items-\u0026gt;toArray(), $offset, $limit);の部分で、collection 型だった$items を配列に戻してしまっているので、この時点でリレーションの情報は消えてしまっていると。\n(Collection から配列に変換する際、採用されるのは collection 内の attributes 部分だけ)\n解決した流れ 公式ドキュメントでarray_sliceを推しているということは、LengthAwarePaginatorには collection を渡せないのか……？\nと思いLengthAwarePaginatorの定義に飛ぶ。\n// LengthAwarePaginator.php  class LengthAwarePaginator extends AbstractPaginator implements Arrayable, ArrayAccess, Countable, IteratorAggregate, JsonSerializable, Jsonable, LengthAwarePaginatorContract { // 略  /** * Create a new paginator instance. * * @param mixed $items * @param int $total * @param int $perPage * @param int|null $currentPage * @param array $options (path, query, fragment, pageName) * @return void */ public function __construct($items, $total, $perPage, $currentPage = null, array $options = []) { $this-\u0026gt;options = $options; foreach ($options as $key =\u0026gt; $value) { $this-\u0026gt;{$key} = $value; } $this-\u0026gt;total = $total; $this-\u0026gt;perPage = $perPage; $this-\u0026gt;lastPage = max((int) ceil($total / $perPage), 1); $this-\u0026gt;path = $this-\u0026gt;path !== \u0026#39;/\u0026#39; ? rtrim($this-\u0026gt;path, \u0026#39;/\u0026#39;) : $this-\u0026gt;path; $this-\u0026gt;currentPage = $this-\u0026gt;setCurrentPage($currentPage, $this-\u0026gt;pageName); $this-\u0026gt;items = $items instanceof Collection ? $items : Collection::make($items); } __constructを確認すると、任意の配列を受け取る第一引数は$itemsと定義されている。\nこの引数の初期化処理を見てみると、\n$this-\u0026gt;items = $items instanceof Collection ? $items : Collection::make($items);\n「collection で来たらそのまま格納して、そうじゃなかったら collection 型にして返す」。\nバリバリに collection 型を出す想定なので、引数に collection を渡しても大丈夫。\nであれば後は、問題の箇所だったarray_sliceの collection バージョンがあれば万事解決。\nコレクション 5.8 Laravel\n slice() Slice メソッドは指定したインデックスからコレクションを切り分けます。\n ググれば一発ですね。\n解決後のコード // app/Services/ItemsService.php // 前略。$columnsには取得したいカラム名を格納  $items = ItemMaster::query() -\u0026gt;select($columns) -\u0026gt;with(\u0026#39;relatedUsers\u0026#39;) -\u0026gt;get(); // 表示する件数のみ取得するために、ページ番号($page)と最大表示件数($limit)から$offsetを計算  $offset = ($page * $limit) - $limit; // *collection型を崩さずに切り取る*  $slice = $items-\u0026gt;slice($offset, $limit); // $sliceの中身はcollectionなので、この戻り値を受け取った先でもcollectionに対する操作が出来る  return new LengthAwarePaginator($slice, count($items), $limit, $page); これで無事に Resource 側でもリレーションを参照できるようになった。\nまとめ Collection に対する理解が浅かった＆各動作の戻り値を意識しなかったために起きた悲劇。初心者のハマるポイントは誰にも予想ができない。\n(昨日の出来事だったんだけど今見ても普通に恥ずかしい)\n(というか名称からして LengthAwarePaginator が slice 周りもサポートしてくれるものだと思ってたけど違うんですね)\nもし他に良い実装方法があれば教えて頂けると嬉しいです:)\nでは。\n","date":"2021-02-19T12:01:46+09:00","permalink":"https://SawaTszm.github.io/p/laravel%E7%8B%AC%E8%87%AA%E3%83%9A%E3%82%B8%E3%83%8D%E3%83%BC%E3%82%BF%E3%81%A7%E8%87%AA%E5%89%8D%E3%81%AEcollection%E3%82%92%E4%BD%BF%E3%81%86/","title":"【Laravel】独自ペジネータで自前のCollectionを使う"},{"content":"エラー 外部キー制約を追加しようとした時、下記エラーで怒られました。\nERROR 1215 (HY000): Cannot add foreign key constraint “外部キー制約を追加できません”\nもっと詳細なエラーログが……ほしい……！ と思ったので調べました。\nSHOW ENGINE INNODB STATUS で外部キー制約時のエラーを確認 恐らくとてつもなく初歩的な話だと思うのですが、SHOW ENGINE 構文なるものがあると。\nSHOWENGINEINNODBSTATUS SHOW ENGINE INNODB STATUSは、InnoDBストレージエンジンの状態に関するInnoDB標準モニターからの広範囲にわたる情報を表示します。\nMySQL :: MySQL 5.6 リファレンスマニュアル :: 13.7.5.16 SHOW ENGINE 構文\n 便利だ！！！！！\n実践 早速入って見てみます。\n$ docker exec -it [docker-name] bash # mysql -u [username] -p \u0026gt; SHOW ENGINE INNODB STATUS ------------------------ LATEST FOREIGN KEY ERROR ------------------------ Cannot find an index in the referenced table where the referenced columns appear as the first columns, or column types in the table and the referenced table do not match for constraint. Note that the internal storage type of ENUM and SET changed in tables created with \u0026gt;= InnoDB-4.1.12, and such columns in old tables cannot be referenced by such columns in new tables. Please refer to http://dev.mysql.com/doc/refman/5.7/en/innodb-foreign-key-constraints.html for correct foreign key definition. “参照された列が最初の列として表示される参照された表にインデックスが見つからないか、テーブルの列タイプと参照された表が制約に一致しません”\nこの一文に沿って見てみたら、参照される側のテーブルの項目と参照するテーブルの項目が合っていませんでした。\nちなみにこのエラーの前は(調べる前に気がつきましたが)「参照される側のテーブルの項目は PRIMARY KEY でなくてはならない」と言うのを忘れて外部キーを設定しようとしてました。\n正月ボケだね〜フフと言いたいところですが、これは単純な初心者ボケ(ガチ)です。\n型を参照される側のテーブルの項目に合わせたら無事設定できました。\n参考にさせて頂いたもの お世話になりました。\nMySQL :: MySQL 5.6 リファレンスマニュアル :: 13.7.5.16 SHOW ENGINE 構文\nMySQL の外部キー追加時にエラー…ERROR 1215 (HY000): Cannot add foreign key constraint\nなぜあなたは SHOW ENGINE INNODB STATUS を読まないのか - そーだいなるらくがき帳\n","date":"2021-02-19T12:01:46+09:00","permalink":"https://SawaTszm.github.io/p/mysql%E5%A4%96%E9%83%A8%E3%82%AD%E3%83%BC%E8%BF%BD%E5%8A%A0%E6%99%82%E3%81%AB%E3%82%A8%E3%83%A9%E3%83%BC/","title":"【MySQL】外部キー追加時にエラー"},{"content":" CERBERUS, n. The watch-dog of Hades, whose duty it was to guard the entrance; everybody, sooner or later, had to go there, and nobody wanted to carry off the entrance. - Ambrose Bierce, The Devil’s Dictionary\n ケルベロスはシンプルで軽量なデータ検証機能を提供するパッケージです。\n公式曰く、拡張も容易なため、カスタム検証も可能です。\n(以下、9割公式のドキュメントの翻訳です)\n 概要 検証用のスキーマを定義し、それを Validator クラスのインスタンスに渡します。\nschma = {\u0026#39;name\u0026#39;: {\u0026#39;type\u0026#39;: \u0026#39;string\u0026#39;}} v = Validator(schema) 次に、validate()を呼び出すことで、簡単にスキーマと辞書を検証できます。\n検証が成功すると True が返されます。\ndocument = {\u0026#39;name\u0026#39;: \u0026#39;john doe\u0026#39;} v.validate(document) # True  インストール 安定バージョンはpipから取得できます。\npip install cerberus\n 使い方 基本的な使い方 # 概要の通り。スキーマを定義し、Validatorクラスに渡して検証する。 \u0026gt;\u0026gt;\u0026gt; from cerberus import Validator \u0026gt;\u0026gt;\u0026gt; schema = {\u0026#39;name\u0026#39;: {\u0026#39;type\u0026#39;: \u0026#39;string\u0026#39;}} \u0026gt;\u0026gt;\u0026gt; v = Validator(schema) \u0026gt;\u0026gt;\u0026gt; document = {\u0026#39;name\u0026#39;: \u0026#39;john doe\u0026#39;} \u0026gt;\u0026gt;\u0026gt; v.validate(document) True # スキーマと辞書を同時に渡すこともできる。 \u0026gt;\u0026gt;\u0026gt; v = Validator() \u0026gt;\u0026gt;\u0026gt; v.validate(document, schema) True # Validatorクラスとそのインスタンスは呼び出し可能なので、以下の簡略構文が使える。 \u0026gt;\u0026gt;\u0026gt; v(document) True ケルベロスは、検証に問題があった時点(最初のバリデーションエラーが起きた時点)では停止しません(！)。\n文書全体が常に処理されてからFalseを返します。その後、エラープロパティにアクセスすることで、起きた問題のリストを取得できます。\nつまり検証したデータ内で起きたバリデーションエラーは全て取得できます。\nバリデーションエラーはValidator.errorsに格納されます。\n\u0026gt;\u0026gt;\u0026gt; schema = {\u0026#39;name\u0026#39;: {\u0026#39;type\u0026#39;: \u0026#39;string\u0026#39;}, \u0026#39;age\u0026#39;: {\u0026#39;type\u0026#39;: \u0026#39;integer\u0026#39;, \u0026#39;min\u0026#39;: 10}} \u0026gt;\u0026gt;\u0026gt; document = {\u0026#39;name\u0026#39;: 400, \u0026#39;age\u0026#39;: 5} \u0026gt;\u0026gt;\u0026gt; v.validate(document, schema) False \u0026gt;\u0026gt;\u0026gt; v.errors {\u0026#39;age\u0026#39;: [\u0026#39;min value is 10\u0026#39;], \u0026#39;name\u0026#39;: [\u0026#39;must be of string type\u0026#39;]} 未知のものを許可 デフォルトでは、スキーマで定義された以外のキーは許可されません。\nただし、Validator でallow_unknown = Trueを設定することにより、スキーマに記述されていないキーを許可したり、検証をかけたりすることができます。\n# デフォルトでは、スキーマで定義されたキーのみが許可される。 \u0026gt;\u0026gt;\u0026gt; schema = {\u0026#39;name\u0026#39;: {\u0026#39;type\u0026#39;: \u0026#39;string\u0026#39;, \u0026#39;maxlength\u0026#39;: 10}} \u0026gt;\u0026gt;\u0026gt; v.validate({\u0026#39;name\u0026#39;: \u0026#39;john\u0026#39;, \u0026#39;sex\u0026#39;: \u0026#39;M\u0026#39;}, schema) False \u0026gt;\u0026gt;\u0026gt; v.errors {\u0026#39;sex\u0026#39;: [\u0026#39;unknown field\u0026#39;]} # allow_unknownをTrueに設定することで、不明なキーを許可できる。(検証はしない) \u0026gt;\u0026gt;\u0026gt; v.schema = {} \u0026gt;\u0026gt;\u0026gt; v.allow_unknown = True \u0026gt;\u0026gt;\u0026gt; v.validate({\u0026#39;name\u0026#39;: \u0026#39;john\u0026#39;, \u0026#39;sex\u0026#39;: \u0026#39;M\u0026#39;}) True # もしくは、検証スキーマに設定できる。この場合は未知のキーが検証される。 \u0026gt;\u0026gt;\u0026gt; v.schema = {} \u0026gt;\u0026gt;\u0026gt; v.allow_unknown = {\u0026#39;type\u0026#39;: \u0026#39;string\u0026#39;} \u0026gt;\u0026gt;\u0026gt; v.validate({\u0026#39;an_unknown_field\u0026#39;: 1}) False \u0026gt;\u0026gt;\u0026gt; v.errors {\u0026#39;an_unknown_field\u0026#39;: [\u0026#39;must be of string type\u0026#39;]} # 初期化時に設定することも可能。 \u0026gt;\u0026gt;\u0026gt; v = Validator({}, allow_unknown=True) \u0026gt;\u0026gt;\u0026gt; v.validate({\u0026#39;name\u0026#39;: \u0026#39;john\u0026#39;, \u0026#39;sex\u0026#39;: \u0026#39;M\u0026#39;}) True # スキーマのルールとして設定することもできる。ネストした先の辞書等にも使用可能。 \u0026gt;\u0026gt;\u0026gt; v = Validator() \u0026gt;\u0026gt;\u0026gt; v.allow_unknown False \u0026gt;\u0026gt;\u0026gt; schema = { ... \u0026#39;name\u0026#39;: {\u0026#39;type\u0026#39;: \u0026#39;string\u0026#39;}, ... \u0026#39;a_dict\u0026#39;: { ... \u0026#39;type\u0026#39;: \u0026#39;dict\u0026#39;, ... \u0026#39;allow_unknown\u0026#39;: True, #a_dict辞書の未知のキーを許可 ... \u0026#39;schema\u0026#39;: { ... \u0026#39;address\u0026#39;: {\u0026#39;type\u0026#39;: \u0026#39;string\u0026#39;} ... } ... } ... } \u0026gt;\u0026gt;\u0026gt; v.validate({\u0026#39;name\u0026#39;: \u0026#39;john\u0026#39;, ... \u0026#39;a_dict\u0026#39;: {\u0026#39;an_unknown_field\u0026#39;: \u0026#39;is allowed\u0026#39;}}, ... schema) True \u0026gt;\u0026gt;\u0026gt; v.validate({\u0026#39;name\u0026#39;: \u0026#39;john\u0026#39;, ... \u0026#39;an_unknown_field\u0026#39;: \u0026#39;is not allowed\u0026#39;, # 親の辞書はv.allow_unknown == False ... \u0026#39;a_dict\u0026#39;:{\u0026#39;an_unknown_field\u0026#39;: \u0026#39;is allowed\u0026#39;}}, ... schema) False \u0026gt;\u0026gt;\u0026gt; v.errors {\u0026#39;an_unknown_field\u0026#39;: [\u0026#39;unknown field\u0026#39;]} 全てを要求する デフォルトでは、スキーマで定義されたキーは不要です。\nただし、Validator でrequire_all = Trueを設定することにより、スキーマに記述した全てのキーを要求できます。\n\u0026gt;\u0026gt;\u0026gt; v = Validator() \u0026gt;\u0026gt;\u0026gt; v.require_all False \u0026gt;\u0026gt;\u0026gt; schema = { ... \u0026#39;name\u0026#39;: {\u0026#39;type\u0026#39;: \u0026#39;string\u0026#39;}, ... \u0026#39;a_dict\u0026#39;: { ... \u0026#39;type\u0026#39;: \u0026#39;dict\u0026#39;, ... \u0026#39;require_all\u0026#39;: True, ... \u0026#39;schema\u0026#39;: { ... \u0026#39;address\u0026#39;: {\u0026#39;type\u0026#39;: \u0026#39;string\u0026#39;} ... } ... } ... } \u0026gt;\u0026gt;\u0026gt; v.validate({\u0026#39;name\u0026#39;: \u0026#39;foo\u0026#39;, \u0026#39;a_dict\u0026#39;: {}}, schema) False \u0026gt;\u0026gt;\u0026gt; v.errors {\u0026#39;a_dict\u0026#39;: [{\u0026#39;address\u0026#39;: [\u0026#39;required field\u0026#39;]}]} \u0026gt;\u0026gt;\u0026gt; v.validate({\u0026#39;a_dict\u0026#39;: {\u0026#39;address\u0026#39;: \u0026#39;foobar\u0026#39;}}, schema) True 処理済みドキュメントの取得 # 検証されたドキュメントはドキュメントプロパティに格納される \u0026gt;\u0026gt;\u0026gt; v.schema = {\u0026#39;amount\u0026#39;: {\u0026#39;type\u0026#39;: \u0026#39;integer\u0026#39;, \u0026#39;coerce\u0026#39;: int}} \u0026gt;\u0026gt;\u0026gt; v.validate({\u0026#39;amount\u0026#39;: \u0026#39;1\u0026#39;}) True \u0026gt;\u0026gt;\u0026gt; v.document {\u0026#39;amount\u0026#39;: 1} # validated() # 検証済みの値のみを返す \u0026gt;\u0026gt;\u0026gt; schema = {\u0026#39;name\u0026#39;: {\u0026#39;type\u0026#39;: \u0026#39;string\u0026#39;, \u0026#39;maxlength\u0026#39;: 10}} \u0026gt;\u0026gt;\u0026gt; v = Validator(schema) \u0026gt;\u0026gt;\u0026gt; v.validated({\u0026#39;name\u0026#39;: \u0026#39;hoge\u0026#39;}) {\u0026#39;name\u0026#39;: \u0026#39;hoge\u0026#39;} \u0026gt;\u0026gt;\u0026gt; v.validated({\u0026#39;name\u0026#39;: 200}) # None # normalized() # 検証せずにDocumentの正規化されたコピーを返す \u0026gt;\u0026gt;\u0026gt; n = v.normalized({\u0026#39;name\u0026#39;: 200}) \u0026gt;\u0026gt;\u0026gt; type(n[\u0026#39;name\u0026#39;]) # \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; n = v.normalized({\u0026#39;name\u0026#39;: \u0026#39;hoge\u0026#39;}) \u0026gt;\u0026gt;\u0026gt; type(n[\u0026#39;name\u0026#39;]) # \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; n {\u0026#39;name\u0026#39;: \u0026#39;hoge\u0026#39;}  検証スキーマ 前述の通りですが、デフォルトの設定では、スキーマに書かれている全てのキーはオプションとして扱われます。\n極端な話、デフォルトではどんなスキーマ相手でもdocument = {}で検証が通ります。\n設定を変えるか、Validator.require_allを True にして全てのスキーマキーを要求することが望ましいです。\n２つのレジスタ # schema_registry \u0026gt;\u0026gt;\u0026gt; from cerberus import schema_registry \u0026gt;\u0026gt;\u0026gt; schema_registry.add(\u0026#39;non-system user\u0026#39;, ... {\u0026#39;uid\u0026#39;: {\u0026#39;min\u0026#39;: 1000, \u0026#39;max\u0026#39;: 0xffff}}) \u0026gt;\u0026gt;\u0026gt; schema = {\u0026#39;sender\u0026#39;: {\u0026#39;schema\u0026#39;: \u0026#39;non-system user\u0026#39;, ... \u0026#39;allow_unknown\u0026#39;: True}, ... \u0026#39;receiver\u0026#39;: {\u0026#39;schema\u0026#39;: \u0026#39;non-system user\u0026#39;, ... \u0026#39;allow_unknown\u0026#39;: True}} # rules_set_registry \u0026gt;\u0026gt;\u0026gt; from cerberus import rules_set_registry \u0026gt;\u0026gt;\u0026gt; rules_set_registry.extend(((\u0026#39;boolean\u0026#39;, {\u0026#39;type\u0026#39;: \u0026#39;boolean\u0026#39;}), ... (\u0026#39;booleans\u0026#39;, {\u0026#39;valuesrules\u0026#39;: \u0026#39;boolean\u0026#39;}))) \u0026gt;\u0026gt;\u0026gt; schema = {\u0026#39;foo\u0026#39;: \u0026#39;booleans\u0026#39;} レジストリを設定、及びダンプするには、extend()及びall()を使用します。\n検証 スキーマ自体の検証は、決まったタイミングのみ行われます。\n(when passed to the validator or a new set of rules is set for a document’s field)\n\u0026gt;\u0026gt;\u0026gt; v = Validator({\u0026#39;foo\u0026#39;: {\u0026#39;allowed\u0026#39;: []}}) \u0026gt;\u0026gt;\u0026gt; v.schema[\u0026#39;foo\u0026#39;] = {\u0026#39;allowed\u0026#39;: 1} Traceback (most recent call last): File \u0026#34;\u0026lt;input\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; File \u0026#34;cerberus/schema.py\u0026#34;, line 99, in __setitem__ self.validate({key: value}) File \u0026#34;cerberus/schema.py\u0026#34;, line 126, in validate self._validate(schema) File \u0026#34;cerberus/schema.py\u0026#34;, line 141, in _validate raise SchemaError(self.schema_validator.errors) SchemaError: {\u0026#39;foo\u0026#39;: {\u0026#39;allowed\u0026#39;: \u0026#39;must be of container type\u0026#39;}} \u0026gt;\u0026gt;\u0026gt; v.schema[\u0026#39;foo\u0026#39;][\u0026#39;allowed\u0026#39;] = \u0026#39;strings are no valid constraint for allowed\u0026#39; \u0026gt;\u0026gt;\u0026gt; v.schema.validate() Traceback (most recent call last): File \u0026#34;\u0026lt;input\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; File \u0026#34;cerberus/schema.py\u0026#34;, line 126, in validate self._validate(schema) File \u0026#34;cerberus/schema.py\u0026#34;, line 141, in _validate raise SchemaError(self.schema_validator.errors) SchemaError: {\u0026#39;foo\u0026#39;: {\u0026#39;allowed\u0026#39;: \u0026#39;must be of container type\u0026#39;}} Serialization Cerberus スキーマは、Python の型(dict, list, stringなど)で構成されています。\nユーザ定義の検証ルールも、スキーマ内ではstring型としてその名前が呼び出されます。\nこれによって、PyYAML など、様々な方法でスキーマを定義することができます。\n\u0026gt;\u0026gt;\u0026gt; import yaml \u0026gt;\u0026gt;\u0026gt; schema_text = \u0026#39;\u0026#39;\u0026#39; ... name: ... type: string ... age: ... type: integer ... min: 10 ... \u0026#39;\u0026#39;\u0026#39; \u0026gt;\u0026gt;\u0026gt; schema = yaml.load(schema_text) \u0026gt;\u0026gt;\u0026gt; document = {\u0026#39;name\u0026#39;: \u0026#39;Little Joe\u0026#39;, \u0026#39;age\u0026#39;: 5} \u0026gt;\u0026gt;\u0026gt; v.validate(document, schema) False \u0026gt;\u0026gt;\u0026gt; v.errors {\u0026#39;age\u0026#39;: [\u0026#39;min value is 10\u0026#39;]} YAML 以外にも、ネストされた辞書を生成できるデコーダーがあれば、どんなシリアライザーも利用できます。\nJSON とか。\n 検証ルール 基本は 👇 にまとまってます\nValidation Rules — Cerberus is a lightweight and extensible data validation library for Python\nvaluesrules 検証される全てのデータに適応されるルールを定義します。\n\u0026gt;\u0026gt;\u0026gt; schema = {\u0026#39;numbers\u0026#39;: ... {\u0026#39;type\u0026#39;: \u0026#39;dict\u0026#39;, ... \u0026#39;valuesrules\u0026#39;: {\u0026#39;type\u0026#39;: \u0026#39;integer\u0026#39;, \u0026#39;min\u0026#39;: 10}} ... } \u0026gt;\u0026gt;\u0026gt; document = {\u0026#39;numbers\u0026#39;: {\u0026#39;an integer\u0026#39;: 10, \u0026#39;another integer\u0026#39;: 100}} \u0026gt;\u0026gt;\u0026gt; v.validate(document, schema) True \u0026gt;\u0026gt;\u0026gt; document = {\u0026#39;numbers\u0026#39;: {\u0026#39;an integer\u0026#39;: 9}} \u0026gt;\u0026gt;\u0026gt; v.validate(document, schema) False \u0026gt;\u0026gt;\u0026gt; v.errors {\u0026#39;numbers\u0026#39;: [{\u0026#39;an integer\u0026#39;: [\u0026#39;min value is 10\u0026#39;]}]}  エラー ドキュメントが見つからない時、または無効な値の時 cerberus.validator.DocumentError\n\u0026gt;\u0026gt;\u0026gt; document = \u0026#34;\u0026#34; \u0026gt;\u0026gt;\u0026gt; v = Validator(schema) \u0026gt;\u0026gt;\u0026gt; v(document) cerberus.validator.DocumentError: \u0026#39;\u0026#39; is not a document, must be a dict 無効な検証スキーマを検出した場合 cerberus.schema.SchemaError\n\u0026gt;\u0026gt;\u0026gt; schema = {\u0026#34;name\u0026#34;: {\u0026#34;type\u0026#34;: \u0026#34;hoge\u0026#34;}} \u0026gt;\u0026gt;\u0026gt; v = Validator(schema) cerberus.schema.SchemaError: {\u0026#39;name\u0026#39;: [{\u0026#39;type\u0026#39;: [\u0026#39;Unsupported types: hoge\u0026#39;]}]}   参考 Python のバリデーションライブラリ「Cerberus」のよく使うバリデーションルールをまとめてみた ｜ Developers.IO\nCerberus 入門！ばりばりバリデーションしよう！ - hogehoge diary\n","date":"2021-02-19T12:01:46+09:00","permalink":"https://SawaTszm.github.io/p/pythoncerberus%E3%81%BE%E3%81%A8%E3%82%81/","title":"【Python】cerberusまとめ"},{"content":"poetryとは pythonの環境管理ツール。\n機能としてはpipenvに近い。\n本当に触りだけやってみたリポジトリはこちら。 sample-poetry\nインストール $pip install poetry プロジェクトを作る $poetry new sample-project 実行すると下記のファイル・フォルダが作成される。\nsample-project ├── README.rst ├── pyproject.toml ├── sample_project │ └── __init__.py └── tests ├── __init__.py └── test_sample_project.py モジュールの追加 $cd sample-project # pyproject.tomlがある階層で $poetry add [--dev] \u0026lt;package name\u0026gt; これでpoetryが管理している仮想環境内にモジュールが追加される。\nそれに伴って、ファイルと依存関係を管理する pyproject.tomlとpoetry.lock が作成される。\nRemove Deoendency $poetry remove \u0026lt;package name\u0026gt; This is very simple :)\nUse Virtual Environment # not active $poetry run python -m pytest # active $poetry shell Use Exsting Environment $poetry install [--no-dev] Reference Poetry - Python dependency management and packaging made easy.\nGitHub - python-poetry/poetry: Python dependency management and packaging made easy.\nModern Python Environments - dependency and workspace management | TestDriven.io\nめも Pipenvなんかにはないスマートな依存関係の解決ができるよって言ってる\n確かにpipenv uninstallは依存関係を見てないし、言われてみればinstallでコケることも割とあるので、 poetry removeとそのスマートさがよしなにしてくれるなら嬉しいなーという感じ\n参考：Pipenv uninstallよりcleanの方が多分便利 - Qiita\n","date":"2021-02-19T12:01:46+09:00","permalink":"https://SawaTszm.github.io/p/pythonpoetry%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/","title":"【Python】poetryを試してみる"},{"content":"知りたかったこと try-catch の有効範囲はどれくらいなのか(呼び出した関数で起きたエラーも拾えるのか)\nネストしたエラーの扱いってどうするのが良いんだろう\n調べて知ったこと  エラーには構文エラーと例外がある。 複数の例外を指定することができる。  except (RuntimeError, TypeError, NameError): pass   exceptは上から順に見て、引っかかったタイミングでそのexcept節内部のみを実行する。\n  最後の except 節では例外名を省いて、ワイルドカードにすることができる。 が、ワイルドカードの except 節は通常のプログラムエラーをたやすく隠してしまうため、注意は必要。\n  Try…except の中には else 節を設けることができる。else 節は全ての except 節よりも後ろに置く。 try 節で全く例外が創出されなかった時に実行されるコードを記述することができる。\n  for arg in sys.argv[1:]: try: f = open(arg, \u0026#39;r\u0026#39;) except OSError: print(\u0026#39;cannot open\u0026#39;, arg) else: print(arg, \u0026#39;has\u0026#39;, len(f.readlines()), \u0026#39;lines\u0026#39;) f.close() Python の例外処理（try, except, else, finally） | note.nkmk.me\n8. エラーと例外 — Python 3.8.1 ドキュメント\n  Except 節では例外名の後に変数を指定できる。 この変数は例外インスタンスに結び付けられ、instance.argsに例外インスタンス生成時の引数が入る。\n例外インスタンスに実装されている__str__はinstance.argsをわざわざ出力しなくても見られるようになっているので、print(inst)で見られる。便利。\n  例外ハンドラは、try 節の直下で発生した例外を処理するだけではなく、その try 節から(たとえ間接的にでも)呼び出された関数の内部で発生した例外も処理する。(！)\n  def this_fails(): ... x = 1/0 ... \u0026gt;\u0026gt;\u0026gt; try: ... this_fails() ... except ZeroDivisionError as err: ... print(\u0026#39;Handling run-time error:\u0026#39;, err) ... Handling run-time error: division by zero 結論 呼び出された先の例外もキャッチできるφ(･･\n","date":"2021-02-19T12:01:46+09:00","permalink":"https://SawaTszm.github.io/p/python%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/","title":"【Python】エラーについて"},{"content":"目的 投票結果を DB に貯めて、その結果を一位から取得したい。\nDB 構成は、\n   Id Recipe     int str    というシンプルな感じです。\nここからレコードの recipe の値を、[a, b, c, b, ...]と言ったリストに直した際、\n「一番投票数の多かったもの」や「投票数が多かった順の要素のリスト」が欲しい。\ncollectionsを使えば比較的簡単にできます。\n要素のカウントは collections が便利 import collections votes_list = [a, b, c, b] c = collections.Counter(votes_list) # Counter({\u0026#39;b\u0026#39;: 2, \u0026#39;a\u0026#39;: 1, \u0026#39;c\u0026#39;: 1}) # `要素`: `出現回数` recipe = c.most_common() # [(\u0026#39;b\u0026#39;, 2), (\u0026#39;a\u0026#39;, 1), (\u0026#39;c\u0026#39;, 1)] # 出現回数が多い順に並べ替えてくれる recipe = c.most_common()[0][0] # b 参考にさせていただいたもの お世話になりました。\ncollections — コンテナデータ型 — Python 3.8.1 ドキュメント\nPython の Counter でリストの各要素の出現個数をカウント | note.nkmk.me\n","date":"2021-02-19T12:01:46+09:00","permalink":"https://SawaTszm.github.io/p/pytyon%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E9%87%8D%E8%A4%87%E8%A6%81%E7%B4%A0%E3%82%92%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%81%99%E3%82%8B/","title":"【Pytyon】リストの重複要素をカウントする"},{"content":"案件で触らせてもらうことになったぜ\n何もわからないぜ\nという状態なので、自分が調べたことについてまとめておきます。\nRadis とは  REmote DIctionary Serverの略 読んで字の如く、ネットワーク接続されたKey-Value型のNoSQLデータベース 永続化可能なインメモリデータベース オープンソースのプロジェクトで、Redis Labsがスポンサー。中身はC言語 AWS上でもRedis-serverが提供されている 様々なデータ構造をサポートしている  STRING LIST SET HASH ZSET (ソート済みのset) 補足：インメモリDB すべてのデータをコンピュータのメインメモリ上に展開しながら動作する。\nコンピュータ(サーバ)の電源が落ちれば消えてしまうので、永続化の手段としてデータをどこかに保存したりすることがある。\nインメモリデータベースでサーバが落ちたらデータはどうなる？ インメモリとカラム型データベースの可能性を調べる（その3） － Publickey\nインストールと動作確認 少し挙動を試してみたいだけなら、公式チュートリアルの画面でコマンドを叩くことができます。\nTry Redis\nMacであればbrewコマンドで一発。\n$brew install Redis インストールできたら、サーバを立ち上げてみます。\n$ redis-server # 立ち上がったら別のタブで動作確認 $ redis-cli 127.0.0.1:6379\u0026gt; set test \u0026#34;hoge\u0026#34; OK 127.0.0.1:6379\u0026gt; get test \u0026#34;hoge\u0026#34; 動作確認までできました。\nこのコマンドを叩く先のredis-serverがローカルにあるかAWS上のサービスとしてあるかが変わってくるだけで、cli側の設定や叩き方は基本的に変わりません。\n(PythonなんかでRedisクライアントを作成する時に指すHOSTが変わってくる位)\nデータのタイプ Redisは前述の通り様々なデータタイプに対応しています。\nどのデータタイプを使用するかによって、コマンドやデータの指定方法が違ってきます。\nコマンドの詳細などは公式ドキュメントで。\nData types – Redis\nStrings 最も基本的な、KeyとValueが1:1な構造。\nKey = valueの形。\n バイナリセーフ(JPEG画像やシリアル化されたRubyオブジェクトなども格納可能) 最大512MBまで  127.0.0.1:6379\u0026gt; set string-key \u0026#34;value1\u0026#34; # OK 127.0.0.1:6379\u0026gt; get string-key # \u0026#34;value1\u0026#34; Lists 文字列のリスト構造。\nKey = [value1, value2, ...]の形。\n 挿入順にソートされる 先頭/末尾に対して追加、削除を実行する リストの最大長は4294967295 リストの両端(先頭、末尾)へのアクセスは早いが、基本的にO（N）操作なので、膨大な量のリストの中間値へのアクセスは遅くなる  127.0.0.1:6379\u0026gt; LPUSH list-key a # (integer) 1 127.0.0.1:6379\u0026gt; LPUSH list-key b # (integer) 2 127.0.0.1:6379\u0026gt; RPUSH list-key c # (integer) 3 127.0.0.1:6379\u0026gt; LRANGE list-key 0 3 # 1) \u0026#34;b\u0026#34; # 2) \u0026#34;a\u0026#34; # 3) \u0026#34;c\u0026#34; Sets 順序、重複なしの文字型集合構造。\nKey = (value1, value2, ...)の形。\n Valueの追加、削除、存在のテスト(要素の数に関係なく一定時間で動作)が可能 重複を許可せず、よし何してくれるので存在を確認してから追加する必要がない セット内の最大数は4294967295  127.0.0.1:6379\u0026gt; SADD set-key value1 value2 value3 # (integer) 3 127.0.0.1:6379\u0026gt; SMEMBERS set-key # 1) \u0026#34;value3\u0026#34; # 2) \u0026#34;value2\u0026#34; # 3) \u0026#34;value1\u0026#34; Hashes 重複なく、順序のないfield:valueのセットを持つ構造。\nKey = {field1: value1, field2: value2, ...}の形。\n field:valueのセットの最大数は4294967295 オブジェクトを表すのにも使用される 少量(100くらい)のハッシュは、スペースをほぼ取らない方法で格納されるので、小さなRedisインスタンスに数百万のオブジェクトを格納できる  127.0.0.1:6379\u0026gt; HSET hash-key field1 value1 # (integer) 1 127.0.0.1:6379\u0026gt; HSET hash-key field2 value2 # (integer) 1 127.0.0.1:6379\u0026gt; HGETALL hash-key # 1) \u0026#34;field1\u0026#34; # 2) \u0026#34;value1\u0026#34; # 3) \u0026#34;field2\u0026#34; # 4) \u0026#34;value2\u0026#34; Sorted Sets 重複なし、Scoreによる順序があるvalue:scoreのセットを持つ構造。\nKey = {value1: score1, value2: score2, ...}の形。\n valueは一意、scoreは重複する可能性がある 要素の追加、削除、更新がO（log(N)）操作でできるため高速 要素はscore順で並べられ、後で並べ替えられるわけではない(ランク付けなどに便利)  127.0.0.1:6379\u0026gt; ZADD sort-key 10 user_1 # (integer) 1 127.0.0.1:6379\u0026gt; ZADD sort-key 20 user_2 # (integer) 1 127.0.0.1:6379\u0026gt; ZRANGE sort-key 0 5 WITHSCORES # 1) \u0026#34;user_1\u0026#34; # 2) \u0026#34;10\u0026#34; # 3) \u0026#34;user_2\u0026#34; # 4) \u0026#34;20\u0026#34; まとめ Redisは早くて便利。\n参考にさせていただいたもの Data types – Redis\n【初心者向け】Redisのデータ型とPythonでの使い方サンプル - Qiita\n【入門】Redis - Qiita\n","date":"2021-02-19T12:01:46+09:00","permalink":"https://SawaTszm.github.io/p/redis%E3%81%A3%E3%81%A6%E3%81%AA%E3%82%93%E3%81%9E%E3%82%84/","title":"【Redis】ってなんぞや"},{"content":"気になったニュース PythonのデフォルトエンコーディングをUTF-8にするために - methaneのブログ\nPyCon JP Blog: PyCon JP 2021 カンファレンス開催日程仮決定のお知らせ\n楽しみ\nFacebookが大規模スケーラビリティへの挑戦で学んだこと（前編）～800億枚の写真データとPHPのスケーラビリティ問題 － Publickey\n社内勉強会で AWS Organizations 基礎の話をしました | DevelopersIO\n他 書くだけ書いてPushするのを忘れがち。\n","date":"2021-02-09T14:11:32+09:00","permalink":"https://SawaTszm.github.io/p/2021-02-09-19-diary/","title":"2021 02 09-19 Diary"},{"content":"気になったニュース Google、ORMが生成するSQLが遅いときの調査を容易にする「sqlcommenter」をオープンソースで公開。Rails、Spring、Djangoなど主要なフレームワークに対応 － Publickey\nPython触ってる割にはDjangoは通ってきていなけれども気になる\n他 現神くんとBONDが熱い\n","date":"2021-02-08T10:09:51+09:00","permalink":"https://SawaTszm.github.io/p/2021-02-08-diary/","title":"2021 02 08 Diary"},{"content":"気になったニュース  【？】「github」の読み方は「ギットハブ」でも「ジットハブ」でもありません。「イ」です。 - Togetter\nGhoti理論って言うものがあって、これはfishと同じ読み方らしい。これに則って読むとgithubが「イ」になる。そうなんだ……\nASCII.jp：Apple Watchがあるとマスクを着けたままiPhoneのロック解除が可能に\nありがとうApple ありがとう世界\nPython向け科学計算パッケージの最新版「NumPy 1.20.0」がリリース：CodeZine（コードジン）\n 「NumPy 1.20.0」はこれまでで最大となるアップデートで、Python 3.7～3.9をサポートし、Python 3.6のサポートは終了している。\n 新しく使うときに3.6以下使うことはないと思うけど、一応頭の片隅で覚えておこう。\n  他  原神くんの事前ダウンロードも終えて準備万端なので明日が楽しみです。\n","date":"2021-02-02T12:01:46+09:00","permalink":"https://SawaTszm.github.io/p/2021-02-02-diary/","title":"2021 02 02 Diary"},{"content":"気になったニュース gitにおけるコミットログ/メッセージ例文集100\nAccess control for GitHub Pages - GitHub Changelog\n社内ドキュメントとしての運用とかにも良さそう。\nエディタ+ mdファイル編集 + GithubにPushで完結するのはとても健康にいい。\n 調べたこと BigQueryへの差分アップロード Insert/Upsertを意識するんじゃなくて、updated_dateを持った状態で複数データ入れてしまう方がいいかなと思った。\nInsert/Upsertを実現できるmergeはテーブルサイズ分課金されるので（SELECTと同じ）、日次で取り込むデータサイクルに入れるのは避けたい。\n対して上書きでなくて重複データをInsertする方法では、\n 集計するときはCOUNT(DISTINCT x)で重複削除すればいい 重複データが積もってきたらSQLで整理ができる  ので、こっちの方が良さげ。\nそうすればBQに移行する日次データは「その日に新規作成されたもの」と「その日に上書きされたもの」だけでよくなる。\n参考：\nBigQuery にデータを差分ロード（UPSERT）する方法まとめ | Developers.IO\nBigQueryでUPDATE？？ - Qiita\n標準 SQL の集計関数 | BigQuery | Google Cloud\nSQLのORについて OR使わないといけないかなと思って調べてたら下記記事を見つけた。\nPostgreSQL: 「OR」を避けてパフォーマンスを向上させよう（翻訳）\n「まだマシ」なダメな例をやろうとしていたのと、後半の話は知らなかったのでﾁｮｯﾄ勉強になった。\nSQL、苦手意識があって若干避けてきたけどそろそろ向き合うべき時が来た気がする。\n 他 原神くんの1.3アプデ、鍾離先生の上方修正が確定したので楽しみ。\nコントローラーで操作できるようになるのも楽しみ。\nこれでもうボタンスカって敵の攻撃が直撃するミスがなくなるんだ……。\nプロセカはやっと実装された星4冬弥くん引きたいけど、金の力で解決しようとするとあと5万くらいかかるの普通に心が折れるなぁと思いました（作文）。\n鍾離先生PU復刻が来たらそっちで天井引きたいしなぁ。等々。\n","date":"2021-02-01T11:06:43+09:00","permalink":"https://SawaTszm.github.io/p/2021-02-01-diary/","title":"2021 02 01 Diary"},{"content":"結論  メールの宅配業者を確認して、\n①Amazonならカスタマーサービスに電話 or チャットで相談\n②それ以外ならここの「配送業者の連絡先」から業者の番号を見つけて連絡\nこれで大体解決。\n私の場合は①で、無事チャットで暗証番号を教えてもらって事なきを得ました。\nこう言うことに遭遇したことがなかったので結構焦った。\n","date":"2021-01-28T19:10:59+09:00","permalink":"https://SawaTszm.github.io/p/amazon%E3%81%AE%E8%8D%B7%E7%89%A9%E3%81%8C%E5%B1%8A%E3%81%84%E3%81%9F%E3%81%AE%E3%81%AB%E5%AE%85%E9%85%8D%E3%83%9C%E3%83%83%E3%82%AF%E3%82%B9%E3%81%AE%E7%95%AA%E5%8F%B7%E3%81%8C%E3%82%8F%E3%81%8B%E3%82%89%E3%81%AA%E3%81%8F%E3%81%A6%E7%84%A6%E3%81%A3%E3%81%9F/","title":"Amazonの荷物が届いたのに宅配ボックスの番号がわからなくて焦った"},{"content":"目的 LINEBOT くんのメッセージからアプリに飛びたいという要件を貰ったけど、\nそのあたり全く初見だったのでまとめてみた。\n① なのは全然わからなかったところがあるからです。追記するかもう一個記事書くかします。\n所感 ディープリンク：任意のアプリの、任意の画面に遷移させる URI とその仕組み\n   種類 対応 URL     App links Android6.0 以降 WebURL   App Indexing Android WebURL   universal links iOS9 以降 WebURL   Custom URL Scheme iOS,Android カスタム URL     App Links ≒ universal linksが良さげ  どちらも WebURL から直接アプリを起動できるので、LINE のメッセージ上から遷移が可能\n受け取る URL を使ってアプリのどの画面を表示させるかを制御する\nAndroid(Google) App Links https:// から始まる URL を利用する。\n設定方法 App Linksに対応してみた - Qiita\nメリット  WebURL から直接アプリを起動できる Android 特有のアプリ選択画面を飛ばせる  デメリット  認証情報ファイルを https 通信可能なサーバに上げておく必要がある android 6.0(2015 年 10 月リリース)以降しか対応していない  App Indexing AppIndexing について - Qiita\nムズカシイ　ヨクワカラナイ\n iOS(Apple) universal links https:// から始まる URL を利用する。\n例：LINE(https://line.me/R/)\n設定方法(universal links) Universal Links を試してみました。関連づけファイル(apple-app-site-association）は S3 に置きました。 ｜ Developers.IO\nメリット(universal links)  アプリが端末に入っていない場合の挙動を設定できる(Store に飛ばす等) WebURL から直接アプリを起動できる  デメリット(universal links)  認証情報ファイルを https 通信可能なサーバに上げておく必要がある iOS9(2015 年 9 月リリース)以降でしか使えない   共通 Custom URL Scheme amzn://apps/android?asin=B004FRX0MY や comgooglemaps:// など、アプリ独自に決めた scheme を利用する方法。\n設定方法(iOS) ２種類の実装方法があるけど内容は同じ。\n info.plistから設定する TARGET \u0026gt; infoから設定する  Safari から固定 URL(my-app://など)を叩けばアプリを起動できる。\nメリット(Custom URL Scheme)  iOS8 以前,android 6.0 以前でも動く。  デメリット(Custom URL Scheme)  アプリがインストールされていない場合に動作しない 他のアプリと競合する可能性がある    参考 途中に載せさせて頂いてるサイトも大変参考になりました……ありがとうございます……\n真面目に Deep Link 対応したい話 - Qiita\niOS/Android のディープリンクについての雑な説明 - Qiita\n","date":"2021-01-28T19:10:59+09:00","permalink":"https://SawaTszm.github.io/p/%E3%83%87%E3%82%A3%E3%83%BC%E3%83%97%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%A3%E3%81%A6%E3%81%AA%E3%82%93%E3%81%9E%E3%82%84/","title":"【ディープリンク】ってなんぞや"},{"content":"気になったニュース Pyston 2.1、本家Python 3.8/3.9よりも十分に高いパフォーマンスを実現 | マイナビニュース\nDropboxが開発元（？）って言うのは知らなかった……\nやってみたこと サイト構築 Github Pages と Hugoでサイト作ってみた（これ）\n参考にさせてもらったサイト：\nGitHub PagesとHugoでブログをつくった\nHugo+Github Pagesで新しい個人ウェブサイトを作った - DEV Community\n使用テーマはこれ：\nBeautifulhugo | Hugo Themes\n拡張機能系もありそうなのでゆっくり見ていきたい\nあと、Hugoの中身はGo言語らしいので、Go勉強し始めることがあったらソース読みたいなと思った\n","date":"2021-01-28T14:20:35+09:00","permalink":"https://SawaTszm.github.io/p/2021-01-28-diary/","title":"2021-01-28 Diary"}]