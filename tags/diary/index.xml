<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Diary on sawa.md</title>
    <link>https://SawaTszm.github.io/tags/diary/</link>
    <description>Recent content in Diary on sawa.md</description>
    <image>
      <title>sawa.md</title>
      <url>https://SawaTszm.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://SawaTszm.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 15 Sep 2022 21:36:09 +0900</lastBuildDate><atom:link href="https://SawaTszm.github.io/tags/diary/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>日記 2022-09-15</title>
      <link>https://SawaTszm.github.io/post/diary-2022-09-15/</link>
      <pubDate>Thu, 15 Sep 2022 21:36:09 +0900</pubDate>
      
      <guid>https://SawaTszm.github.io/post/diary-2022-09-15/</guid>
      <description>体調悪くてお休みいただいて、夜になってやっと復活してきたので、前記事(lodash is dead, long live radash)を見かけて気になってたRadashについて調べてました。
Radash - github
だけど調べてたら この「Lodashは死んだ」の記事と公式のドキュメント、githubページ以外全然関連の記事が出てこなくて（Radashって検索欄に入れてるのにRedashの記事ばっかり出てきて、マイナス検索してもRadashに触れてる記事はなかった）、記事は結構見られてたけどな……？と思って記事に戻ってみたら、書いてるのが作者本人でした。
(最後の方に書いてあったし、早い段階でGithubページ見に行ってリポジトリ名チェックしてたらもっと早く気づけたかもしれません)
タイトルだけ読んで現行のlodashに取ってかわる最新版なんだと思ってしまっていたので、この事実＆それ自体に気づくまでが結構長かったのが個人的なショックでした。そういう意味ではいい学びになった感じがします。
あと、コメント欄で「自分で書いとるんか〜い」みたいな突っ込みもされてましたが、それらに対して「それでもこのライブラリを作った彼の労力は賞賛すべき」「このような肯定的な批判を受け取る場を自ら作り出すこと自体に批判的になってはいけない。それはOSSの衰退につながる」みたいなコメントが多かったことも、OSS文化に触れてまだ浅い身からすると新しい気づきでした。
次からは、何かしら記事を見るときは「どういう立場で書かれているものか」は軽くチェックすることを心がけようと思います。</description>
    </item>
    
    <item>
      <title>TOEICを受けてきました</title>
      <link>https://SawaTszm.github.io/post/diary-2022-09-13/</link>
      <pubDate>Tue, 13 Sep 2022 19:07:16 +0900</pubDate>
      
      <guid>https://SawaTszm.github.io/post/diary-2022-09-13/</guid>
      <description>タイトル通りTOEIC受けてきました。
新卒時代にIPテストを受けて驚異の300点台前半を叩き出してから一回も受けてなかったんですが、最近英語圏のVtuberにハマって英語に触れる機会が増えてきたのでいけるのでは……？と思って勢いで申し込みました。
一応1ヶ月間は真面目に勉強したので、過去最高点は取れるんじゃないかなと思います（低すぎるハードル）。
以下備忘録を兼ねた感想です。
腕時計必須（それはそう） スマートウォッチ系がダメだって言うのを前日の夜に知って、腕時計なしで挑むことになったのが辛かったです。
1問20秒ほどだっていうのは知ってたので何とか体内時計で頑張りました。最後の問題解いたあたりで試験が終わったので、結構正確だったんだと思います（そこじゃない）。
今後も年1くらいで受けたいな〜と思ってるのでお気に入りの腕時計探しておきます。
慣れてないと集中力続けさせるのが結構キツい リスニングのPart4の途中と、リーディングのPart7の途中で「もう残り全部塗りつぶして帰りたいな……」ってなってました。
勉強してはいたんですが、一問一答形式のものをずっとやっていただけだったので、本番の長さに全く体が適応できてなかったです。
模試とか絶対やった方がいい。
勉強してる時ほど音声はクリアじゃない ノイキャン付きのイヤホンつけて聞く音源とやたらデカい室内のスピーカーの音は全然違うので、最初の音量合わせの時に慣れるのにもうちょっとフォーカス当てた方がいいなと思いました。
成長はちょっと感じた IP受けた時（3~4年前……？）は正直「問題に何聞かれてるかわからない」レベルだったのが、少なくともそこで困ることはなかったのでちょっとは成長してるんだな〜って感じました。
1ヶ月くらいで結果出ると思うので楽しみです。
追記 結果が出ました。初めて400点代が取れました＆今までの最高得点から100点近く上がりました！
点数的にはまだまだですが、この調子でこれからも頑張っていきたいです。</description>
    </item>
    
    <item>
      <title>日記(2022/06/25)</title>
      <link>https://SawaTszm.github.io/post/diary-2022-06-25/</link>
      <pubDate>Sat, 25 Jun 2022 13:08:08 +0900</pubDate>
      
      <guid>https://SawaTszm.github.io/post/diary-2022-06-25/</guid>
      <description>今更だけど remについて。
一回調べてなるほど〜！ってなった記憶はあるのにロジック考えずに見た目で数字決めてコミットしたの中々にテンパってたなって反省をした備忘録です。（一息）
remとは 基準のフォントサイズを1として考える単位。
例えば：1rem=16px(html要素のフォントサイズが16px)の場合、
12px: 0.75rem 14px: 0.875rem 18px: 1.125rem &amp;hellip; と言う感じ。
「〇〇pxって何remだっけ……」ってなって他のコードと実際の表示を見にいくことが多かったんですが、
欲しいpx数/ルートのフォントサイズ(px)すれば出てくる……出てくるのに……何で今まで調べなきゃ出てこないって思ってたんだろう……。
反省。次からは間違えないと思います。</description>
    </item>
    
    <item>
      <title>気をつけるべきだなと思ったこと</title>
      <link>https://SawaTszm.github.io/post/things-to-watch-out-for/</link>
      <pubDate>Thu, 23 Jun 2022 21:29:26 +0900</pubDate>
      
      <guid>https://SawaTszm.github.io/post/things-to-watch-out-for/</guid>
      <description>タイトルの通り、
最近仕事をしていて気がついたこと/教えてもらえたことで、自分はこれを気をつけた方がいいなと思ったことを忘れないために言語化したメモです。
(増えるかもしれません)
「既存のもの」を「覆してはならない前提」と捉えない 悪かった例(この場合はDjango) 私「このmodelにカラム追加したいけど、似たようなカラムがあるしな。データ被るのも嫌だから、propertyメソッドで動的に返すようにしよう」
~30分後~
「あ、propertyだとunion()時ののcolumn数合わせに使えないんだった。どうしよう……」(ここで無限ググり編に突入)
~30分後~
「クエリもうひとつ発行してitertools.chain()で繋げる手があるかぁ」(そうじゃない)
この時の結論：
元のmodelのデータ定義自体が改善しても良い範囲だったので、unionできる形にmodelを寄せることを提案してもらって解決しました。
メタ的な原因 既にプロジェクトに存在しているコードを、無意識に「絶対的に正しいもの」「変えちゃいけないもの」として捉えていました。
（「このmodelはこういう定義なんだから、これを変形してどうにかしないと」と言うところから思考がスタートしていた）
社会人初の案件がガチガチに要件が固まった後のネットワーク更改案件だったので、「既存のconfigは絶対に正しい、これを崩さないように新しい経路繋げないと」的な考えが根底に残ってたのかもしれないです。
(今までも似たような感覚に陥ったことが何回かあって、言語化できてちょっとスッキリしました)
改善策 「既存のもの」を「覆してはならない前提」と捉えない。 実装のために考え始める時、「そもそも」の疑問を大切にする。 「そもそも、どうしてこのmodelってこういう構造になったんだろう？」 言っても「考える時に気をつけよう」は忘れるので、しばらくモニターに付箋を貼る。 緊張時に毎回心拍数120近くまで上がるのはいき過ぎなので対策を考えるべき これ、最近調べて初めて知りました。
今まで緊張してる時(例えばプレゼン前とか、極端な例で言うと広めのメンションでslack送る前とか)Apple Watchに「非常に高い心拍数です」って言われるのをネタにして生きてきてたんですが、最近動悸が激しすぎて頭が真っ白になる経験をして、これはまずいなと思って調べたらやっぱり心拍数上がりすぎらしいです。
幸いその時は人前で喋るとかじゃなくて、家の中で一人ぜーはー言ってただけで落ち着く時間もあって事なきを得ましたが、このままじゃ良くないので色々対策してみようと思いました。</description>
    </item>
    
    <item>
      <title>[TIL] display: contents;</title>
      <link>https://SawaTszm.github.io/post/css-display-contents/</link>
      <pubDate>Mon, 20 Jun 2022 19:54:19 +0900</pubDate>
      
      <guid>https://SawaTszm.github.io/post/css-display-contents/</guid>
      <description>上手くいかないCSSをdev toolでぐりぐり動かしていたらdisplay: contents;なる値があることを知って、結局そのパターンは上手くいったんですがなんで上手くいったかわからないのでちょっとだけ調べました。
(本格的に調べるのは後日)
display: contents;とは colissで紹介されていました。
(先日参加した勉強会で紹介されていたサイトなのでちょっとテンションが上が理ました)
すごくざっくり言うと、
タグ内のコンテンツを通常通り描画しつつ、周囲のタグは完全に省略する display: contents; が指定されたタグ自体が無視されたような挙動になる CSS Gridのレイアウトで、複数あるカードのそれぞれの高さや幅を揃えるのに便利 (今回上手くいった修正はこのパターンだった) まだ全然追いきてれないですが、タグを無視したような挙動をする以上落とし穴(何かの拍子にめちゃくちゃ表示崩れる)とかもありそうなので、見れる時にもう少しちゃんと挙動を見たい……。
ちなみにCan I Useで見てみると、大体2018年くらいからパーシャルサポートが始まり、現在(2022/06)主要なブラウザはほとんどがフルサポートです。
IE君はNot Supportedですが先日卒業式をしたので……
参考 [CSS]「display: contents;」がすごい便利！ラッパーを使った実装が大きく変わるこれからのテクニック Can I use display: contents </description>
    </item>
    
    <item>
      <title>基本情報に受かりました</title>
      <link>https://SawaTszm.github.io/post/diary-2021-05-16/</link>
      <pubDate>Mon, 16 May 2022 21:41:51 +0900</pubDate>
      
      <guid>https://SawaTszm.github.io/post/diary-2021-05-16/</guid>
      <description>タイトルの通り 3月頃に思い立って申し込みをして、1ヶ月前後の勉強で受かりました。嬉しいことに午前午後どちらも9割近く取った上での合格でした。
全体的には、学生時代に学んだことを思い出すのに役立ったなぁと言う印象でした。
学生の頃に「ITパスポート取るか。言っても専攻だし(情報工学科だった)いけるでしょ！」と全く勉強をせずに行って落ちた経験があり、国家試験系からは長年目を背け続けていたので、受けるにあたってちょっと驚いたことがいくつかあったので書いておきます。
早起きを証明できる試験ではなくなっていた よく基本情報についてTwitterなどで「朝早く起きて会場に行ける社会性を証明できる試験」なんて揶揄されているのを目にしていましたが、CBT方式になって時間は選び放題、なんなら午前と午後を別日に受けてもいいと言う緩さになっていました。
正直、今回基本情報を実際に受ける気になったのも、このCBT方式で受けられると言うのを知ったから、と言うところが大きかったです。
直近の過去問が参照できない 基本情報と言えば引くほど過去問が見れるイメージがあったんですが、CBT方式になってからの過去問は公開されていないみたいです。
今はまだCBT方式になってから日が浅い＆シラバスの大幅な改訂も入っていないので、公開されている過去問を一通り解いても十分勉強になります。ただ、これからどんどん過去問と実際の問題との乖離が進んでいくんじゃないかなーと思います。
(そもそもCBT方式にしてから合格者の割合がグッと増えてるらしいので、そう言う意味ではちょうど良いところに落ち着くのかも？)
応用情報はまだ紙試験 この勢いで応用情報も受けようかな〜と思ったんですが、応用情報の方はまだ筆記らしくて悩んでます。
朝起きれないし、一日に午前午後で集中力続く気がしないので……(社会適応力皆無)。</description>
    </item>
    
    <item>
      <title>2021 08 05 Diary</title>
      <link>https://SawaTszm.github.io/post/diary-2021-08-05/</link>
      <pubDate>Thu, 05 Aug 2021 21:26:58 +0900</pubDate>
      
      <guid>https://SawaTszm.github.io/post/diary-2021-08-05/</guid>
      <description>最近やったこと DIY(初級) 人生初DIYで元々使ってた机をL字に改造しました。
加工済みのいい感じのサイズの板買ってきてネジで止めただけの簡易机ながら結構快適。仕事も趣味も机に向かってやる系でオンオフの切り替え(というか机片付けてPCしまってiPad出して……の一連の作業)が面倒くさくて困ってたから、趣味の環境をL字の部分にそのまま広げて置くことで凄く楽になりました。
ブログ(ここ)の改装 見た目を若干弄りました。
HTML, CSSに苦手意識を持っててあんまり積極的に触ってこなかったけど(仕事で必要な時にリファレンス見ればいいやの精神)、色々教えてもらってソース見たり弄ったりするのが楽しくなってきました。
そのうちHUGOのテーマ作りたいですね。
気になったもの crowdin crowdin - Agile localization for tech companies
最近買ったDjango本で紹介されてたDjango Girlsのチュートリアル内で、翻訳を進めていくために使われてました。
Django Girlsのチュートリアル Django Girls(上とダブるけど)
さっと見たけどめちゃくちゃわかりやすかったです。特にインターネットの仕組みあたり。
人に教える機会があったらここおすすめしたいです。
その他 新すばせかが楽しいです。指は死んでます。</description>
    </item>
    
    <item>
      <title>2021 02 09-19 Diary</title>
      <link>https://SawaTszm.github.io/post/diary-2021-02-09/</link>
      <pubDate>Tue, 09 Feb 2021 14:11:32 +0900</pubDate>
      
      <guid>https://SawaTszm.github.io/post/diary-2021-02-09/</guid>
      <description>気になったニュース PythonのデフォルトエンコーディングをUTF-8にするために - methaneのブログ
PyCon JP Blog: PyCon JP 2021 カンファレンス開催日程仮決定のお知らせ
楽しみ
Facebookが大規模スケーラビリティへの挑戦で学んだこと（前編）～800億枚の写真データとPHPのスケーラビリティ問題 － Publickey
社内勉強会で AWS Organizations 基礎の話をしました | DevelopersIO
他 書くだけ書いてPushするのを忘れがち。</description>
    </item>
    
    <item>
      <title>2021 02 02 Diary</title>
      <link>https://SawaTszm.github.io/post/diary-2021-02-02/</link>
      <pubDate>Tue, 02 Feb 2021 12:01:46 +0900</pubDate>
      
      <guid>https://SawaTszm.github.io/post/diary-2021-02-02/</guid>
      <description>気になったニュース 【？】「github」の読み方は「ギットハブ」でも「ジットハブ」でもありません。「イ」です。 - Togetter
Ghoti理論って言うものがあって、これはfishと同じ読み方らしい。これに則って読むとgithubが「イ」になる。そうなんだ……
ASCII.jp：Apple Watchがあるとマスクを着けたままiPhoneのロック解除が可能に
ありがとうApple ありがとう世界
Python向け科学計算パッケージの最新版「NumPy 1.20.0」がリリース：CodeZine（コードジン）
「NumPy 1.20.0」はこれまでで最大となるアップデートで、Python 3.7～3.9をサポートし、Python 3.6のサポートは終了している。
新しく使うときに3.6以下使うことはないと思うけど、一応頭の片隅で覚えておこう。
他 原神くんの事前ダウンロードも終えて準備万端なので明日が楽しみです。</description>
    </item>
    
    <item>
      <title>2021 02 01 Diary</title>
      <link>https://SawaTszm.github.io/post/diary-2021-02-01/</link>
      <pubDate>Mon, 01 Feb 2021 11:06:43 +0900</pubDate>
      
      <guid>https://SawaTszm.github.io/post/diary-2021-02-01/</guid>
      <description>気になったニュース gitにおけるコミットログ/メッセージ例文集100
Access control for GitHub Pages - GitHub Changelog
社内ドキュメントとしての運用とかにも良さそう。
エディタ+ mdファイル編集 + GithubにPushで完結するのはとても健康にいい。
調べたこと BigQueryへの差分アップロード Insert/Upsertを意識するんじゃなくて、updated_dateを持った状態で複数データ入れてしまう方がいいかなと思った。
Insert/Upsertを実現できるmergeはテーブルサイズ分課金されるので（SELECTと同じ）、日次で取り込むデータサイクルに入れるのは避けたい。
対して上書きでなくて重複データをInsertする方法では、
集計するときはCOUNT(DISTINCT x)で重複削除すればいい 重複データが積もってきたらSQLで整理ができる ので、こっちの方が良さげ。
そうすればBQに移行する日次データは「その日に新規作成されたもの」と「その日に上書きされたもの」だけでよくなる。
参考：
BigQuery にデータを差分ロード（UPSERT）する方法まとめ | Developers.IO
BigQueryでUPDATE？？ - Qiita
標準 SQL の集計関数 | BigQuery | Google Cloud
SQLのORについて OR使わないといけないかなと思って調べてたら下記記事を見つけた。
PostgreSQL: 「OR」を避けてパフォーマンスを向上させよう（翻訳）
「まだマシ」なダメな例をやろうとしていたのと、後半の話は知らなかったのでﾁｮｯﾄ勉強になった。
SQL、苦手意識があって若干避けてきたけどそろそろ向き合うべき時が来た気がする。
他 原神くんの1.3アプデ、鍾離先生の上方修正が確定したので楽しみです。
コントローラーで操作できるようになるのも楽しみ。
これでもうボタンスカって敵の攻撃が直撃するミスがなくなるんだ……。</description>
    </item>
    
    <item>
      <title>2021-01-28 Diary</title>
      <link>https://SawaTszm.github.io/post/diary-2021-01-28/</link>
      <pubDate>Thu, 28 Jan 2021 14:20:35 +0900</pubDate>
      
      <guid>https://SawaTszm.github.io/post/diary-2021-01-28/</guid>
      <description>気になったニュース Pyston 2.1、本家Python 3.8/3.9よりも十分に高いパフォーマンスを実現 | マイナビニュース
Dropboxが開発元（？）って言うのは知らなかった……
やってみたこと サイト構築 Github Pages と Hugoでサイト作ってみました。（これ）
参考にさせてもらったサイト：
GitHub PagesとHugoでブログをつくった
Hugo+Github Pagesで新しい個人ウェブサイトを作った - DEV Community
使用テーマはこれ：
Beautifulhugo | Hugo Themes
拡張機能系もありそうなのでゆっくり見ていきたいです。
あと、Hugoの中身はGo言語らしいので、Go勉強し始めることがあったらソース読みたいなと思いました。</description>
    </item>
    
  </channel>
</rss>
